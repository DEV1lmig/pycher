"""added exam tables

Revision ID: 55466fd216dd
Revises: 44a5ef4c3573
Create Date: 2025-06-13 21:56:26.928986

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = '55466fd216dd'
down_revision: Union[str, None] = '44a5ef4c3573'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def column_exists(conn, table_name: str, column_name: str, schema: str = 'public') -> bool:
    """Checks if a column exists in a table."""
    sql = text(f"""
        SELECT EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema = :schema AND table_name = :table_name AND column_name = :column_name
        )
    """)
    return conn.execute(sql, {'schema': schema, 'table_name': table_name, 'column_name': column_name}).scalar_one()


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    if not column_exists(bind, 'course_exams', 'time_limit_minutes'):
        op.add_column('course_exams', sa.Column('time_limit_minutes', sa.Integer(), nullable=True))
    if column_exists(bind, 'course_exams', 'questions'):
        op.drop_column('course_exams', 'questions')
    if column_exists(bind, 'course_exams', 'order_index'):
        op.drop_column('course_exams', 'order_index')
    if not column_exists(bind, 'user_course_enrollments', 'exam_unlocked'):
        op.add_column('user_course_enrollments', sa.Column('exam_unlocked', sa.Boolean(), nullable=True, server_default=sa.false()))
        op.alter_column('user_course_enrollments', 'exam_unlocked', nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    if column_exists(bind, 'user_course_enrollments', 'exam_unlocked'):
        op.drop_column('user_course_enrollments', 'exam_unlocked')
    if not column_exists(bind, 'course_exams', 'order_index'):
        op.add_column('course_exams', sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=False, server_default='0'))
    if not column_exists(bind, 'course_exams', 'questions'):
        op.add_column('course_exams', sa.Column('questions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, server_default='[]'))
    if column_exists(bind, 'course_exams', 'time_limit_minutes'):
        op.drop_column('course_exams', 'time_limit_minutes')
    # ### end Alembic commands ###
