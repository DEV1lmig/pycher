"""Add module_id and order_index to exercises

Revision ID: a10e133c90c2
Revises: 57db381d62fd
Create Date: 2025-05-19 11:30:44.671741

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = 'a10e133c90c2'
down_revision: Union[str, None] = '57db381d62fd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def column_exists(conn, table_name: str, column_name: str, schema: str = 'public') -> bool:
    """Checks if a column exists in a table."""
    sql = text(f"""
        SELECT EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema = :schema
              AND table_name = :table_name
              AND column_name = :column_name
        )
    """)
    result = conn.execute(sql, {'schema': schema, 'table_name': table_name, 'column_name': column_name})
    return result.scalar_one()


def constraint_exists(conn, constraint_name: str, schema: str = 'public') -> bool:
    """Checks if a constraint exists."""
    sql = text(f"""
        SELECT EXISTS (
            SELECT 1
            FROM information_schema.table_constraints
            WHERE table_schema = :schema AND constraint_name = :constraint_name
        )
    """)
    return conn.execute(sql, {'schema': schema, 'constraint_name': constraint_name}).scalar_one()


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    if not column_exists(bind, 'exercises', 'module_id'):
        op.add_column('exercises', sa.Column('module_id', sa.Integer(), nullable=True))
    if not column_exists(bind, 'exercises', 'order_index'):
        op.add_column('exercises', sa.Column('order_index', sa.Integer(), nullable=False, server_default='1'))
        op.alter_column('exercises', 'order_index', server_default=None)
    if not column_exists(bind, 'exercises', 'hints'):
        op.add_column('exercises', sa.Column('hints', sa.Text(), nullable=True))

    op.alter_column('exercises', 'lesson_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # This is the critical fix:
    fk_name = 'fk_exercises_module_id'
    if not constraint_exists(bind, fk_name):
        # Before creating the FK, ensure there are no orphaned module_id values.
        # This assumes that if a module_id doesn't exist in the modules table, it should be NULL.
        # Adjust the logic if exercises must always belong to a module.
        op.execute("""
            UPDATE exercises e
            SET module_id = NULL
            WHERE NOT EXISTS (SELECT 1 FROM modules m WHERE m.id = e.module_id)
        """)
        op.create_foreign_key(fk_name, 'exercises', 'modules', ['module_id'], ['id'])

    if column_exists(bind, 'exercises', 'points'):
        op.drop_column('exercises', 'points')
    if column_exists(bind, 'exercises', 'difficulty'):
        op.drop_column('exercises', 'difficulty')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('exercises', sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('exercises', sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('fk_exercises_module_id', 'exercises', type_='foreignkey')
    op.alter_column('exercises', 'lesson_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('exercises', 'hints')
    op.drop_column('exercises', 'order_index')
    op.drop_column('exercises', 'module_id')
    # ### end Alembic commands ###
