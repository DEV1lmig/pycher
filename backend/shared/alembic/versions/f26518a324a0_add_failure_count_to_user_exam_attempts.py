"""add failure count to user exam attempts

Revision ID: f26518a324a0
Revises: aebe0fd503a5
Create Date: 2025-06-23 10:44:18.436433

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision: str = 'f26518a324a0'
down_revision: Union[str, None] = 'e40d324db272'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def column_exists(conn, table_name: str, column_name: str, schema: str = 'public') -> bool:
    """Checks if a column exists in a table."""
    sql = text(f"""
        SELECT EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_schema = :schema AND table_name = :table_name AND column_name = :column_name
        )
    """)
    return conn.execute(sql, {'schema': schema, 'table_name': table_name, 'column_name': column_name}).scalar_one()

def constraint_exists(conn, constraint_name: str, schema: str = 'public') -> bool:
    """Checks if a constraint exists."""
    sql = text(f"""
        SELECT EXISTS (
            SELECT 1
            FROM information_schema.table_constraints
            WHERE table_schema = :schema AND constraint_name = :constraint_name
        )
    """)
    return conn.execute(sql, {'schema': schema, 'constraint_name': constraint_name}).scalar_one()


def upgrade() -> None:
    """Upgrade schema."""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    if not column_exists(bind, 'user_exam_attempts', 'course_id'):
        op.add_column('user_exam_attempts', sa.Column('course_id', sa.Integer(), nullable=True))
        op.execute("UPDATE user_exam_attempts SET course_id = 0 WHERE course_id IS NULL") # Placeholder, adjust as needed
        op.alter_column('user_exam_attempts', 'course_id', nullable=False)

    if not column_exists(bind, 'user_exam_attempts', 'exercise_id'):
        op.add_column('user_exam_attempts', sa.Column('exercise_id', sa.Integer(), nullable=True))
        op.execute("UPDATE user_exam_attempts SET exercise_id = 0 WHERE exercise_id IS NULL") # Placeholder, adjust as needed
        op.alter_column('user_exam_attempts', 'exercise_id', nullable=False)

    if not column_exists(bind, 'user_exam_attempts', 'is_active'):
        op.add_column('user_exam_attempts', sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.true()))
        op.alter_column('user_exam_attempts', 'is_active', nullable=False)

    if not column_exists(bind, 'user_exam_attempts', 'failure_count'):
        op.add_column('user_exam_attempts', sa.Column('failure_count', sa.Integer(), nullable=True, server_default='0'))
        op.alter_column('user_exam_attempts', 'failure_count', nullable=False)

    fk_exercise_name = 'fk_user_exam_attempts_exercise_id_exercises'
    if not constraint_exists(bind, fk_exercise_name):
        op.create_foreign_key(fk_exercise_name, 'user_exam_attempts', 'exercises', ['exercise_id'], ['id'])

    fk_course_name = 'fk_user_exam_attempts_course_id_courses'
    if not constraint_exists(bind, fk_course_name):
        op.create_foreign_key(fk_course_name, 'user_exam_attempts', 'courses', ['course_id'], ['id'])

    constraint_to_drop = 'uq_user_lesson_progress'
    if constraint_exists(bind, constraint_to_drop):
        op.drop_constraint(constraint_to_drop, 'user_lesson_progress', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    constraint_to_create = 'uq_user_lesson_progress'
    if not constraint_exists(bind, constraint_to_create):
        op.create_unique_constraint(constraint_to_create, 'user_lesson_progress', ['user_id', 'lesson_id'])

    fk_course_name = 'fk_user_exam_attempts_course_id_courses'
    if constraint_exists(bind, fk_course_name):
        op.drop_constraint(fk_course_name, 'user_exam_attempts', type_='foreignkey')

    fk_exercise_name = 'fk_user_exam_attempts_exercise_id_exercises'
    if constraint_exists(bind, fk_exercise_name):
        op.drop_constraint(fk_exercise_name, 'user_exam_attempts', type_='foreignkey')

    if column_exists(bind, 'user_exam_attempts', 'failure_count'):
        op.drop_column('user_exam_attempts', 'failure_count')
    if column_exists(bind, 'user_exam_attempts', 'is_active'):
        op.drop_column('user_exam_attempts', 'is_active')
    if column_exists(bind, 'user_exam_attempts', 'exercise_id'):
        op.drop_column('user_exam_attempts', 'exercise_id')
    if column_exists(bind, 'user_exam_attempts', 'course_id'):
        op.drop_column('user_exam_attempts', 'course_id')
    # ### end Alembic commands ###
