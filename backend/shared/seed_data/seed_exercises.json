[
  {
    "id": 1,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 1,
    "order_index": 1,
    "title": "Ejercicio 1.1.1: ¿Qué es Python?",
    "description": "Responde: ¿Cuál es una de las principales razones por las que Python es popular para principiantes?",
    "instructions": "1. Tu objetivo es imprimir una frase específica en la consola.\n2. Utiliza la función `print()` de Python para esta tarea.\n3. La frase exacta que debes imprimir es: `Su sintaxis es clara y legible`.\n4. Asegúrate de que esta frase esté encerrada entre comillas (simples `'` o dobles `\"`) para que Python la interprete como un string (texto).\n   Por ejemplo: `print(\"Texto de ejemplo\")`.",
    "starter_code": "# Utiliza la función print() para mostrar la respuesta exacta.\nprint(\"...\")",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Su sintaxis es clara y legible\n",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "missing_newline": "Recuerda terminar tu print con un salto de línea.",
        "wrong_case": "Revisa las mayúsculas y minúsculas.",
        "extra_spaces": "No agregues espacios extra al final o inicio.",
        "wrong_type": "Asegúrate de que estás imprimiendo un texto (string).",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 2,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 2,
    "order_index": 1,
    "title": "Ejercicio 1.2.1: Saludo Personalizado",
    "description": "Escribe un programa que lea un nombre y luego imprima '¡Hola, [Nombre]!' en pantalla, reemplazando [Nombre] con el nombre leído.",
    "instructions": "1. Utiliza la función `input()` para leer un nombre que será proporcionado por el sistema. No necesitas mostrar un mensaje dentro de `input()` (ej. `nombre = input()` es suficiente).\n2. Almacena el nombre leído en una variable llamada `nombre`.\n3. Utiliza la función `print()` para mostrar el saludo.\n4. Para incluir el valor de tu variable `nombre` dentro del mensaje, puedes usar un f-string. El formato del mensaje debe ser: `¡Hola, [valor de la variable nombre]!`.\n   Ejemplo de cómo usar un f-string: `print(f\"¡Hola, {nombre}!\")`.\n5. Asegúrate de que la salida final sea exactamente como se espera, incluyendo los signos de exclamación.",
    "starter_code": "nombre = input()\nprint(f\"¡Hola, {nombre}!\")",
    "validation_type": "saludo_personalizado",
    "validation_rules": {
      "requires_input_function": true,
      "output_format_template": "¡Hola, {var}!",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "submission_test_strategy": {
        "type": "generated_inputs",
        "count": 3,
        "input_constraints": {
          "type": "string",
          "min_length": 3,
          "max_length": 10,
          "charset": "alpha"
        }
      },
      "target_variable_names": ["nombre"],
      "require_fstring": true,
      "custom_feedback": {
        "missing_input": "Debes usar la función input() para leer el nombre.",
        "wrong_variable": "La variable debe llamarse 'nombre' y usarse en el print.",
        "not_fstring": "Usa un f-string para imprimir el saludo.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    },
    "difficulty": "Fácil",
    "estimated_time_minutes": 5,
    "tags": ["input", "print", "f-strings", "variables"]
  },
  {
    "id": 3,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 3,
    "order_index": 1,
    "title": "Ejercicio 1.3.1: Variables y Tipos",
    "description": "Crea una variable 'ciudad' con el valor \"Madrid\" y una variable `poblacion` con el valor 3300000. Imprime ambas variables, cada una en una nueva línea.",
    "instructions": "1. Define una variable llamada `ciudad` y asígnale el valor de string \"Madrid\".\n2. Define otra variable llamada `poblacion` y asígnale el valor numérico (entero) 3300000.\n3. Utiliza la función `print()` para mostrar el valor de la variable `ciudad` en la consola.\n4. En una línea separada, utiliza nuevamente la función `print()` para mostrar el valor de la variable `poblacion`.",
    "starter_code": "# 1. Define la variable ciudad\n\n# 2. Define la variable poblacion\n\n# 3. Imprime la variable ciudad\n\n# 4. Imprime la variable poblacion",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Madrid\n3300000\n",
      "expected_print_count": 2,
      "strict_variable_names": ["ciudad", "poblacion"],
      "require_variables_in_print": ["ciudad", "poblacion"],
      "expected_types": ["str", "int"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "Verifica que el primer print sea de un string ('ciudad') y el segundo de un entero ('poblacion').",
        "wrong_variable": "Debes usar los nombres de variable exactos: 'ciudad' y 'poblacion', y asegurarte de que se definan y usen correctamente.",
        "wrong_print_count": "Se esperaban dos operaciones de print."
      }
    }
  },
  {
    "id": 4,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 4,
    "order_index": 1,
    "title": "Ejercicio 2.1.1: Operaciones Básicas",
    "description": "Calcula el resultado de la expresión matemática (15 + 5) * 2 / 4 - 1 e imprímelo en la consola.",
    "instructions": "Escribe la expresión matemática directamente en tu código y usa print para mostrar el resultado. Puedes asignar el resultado a una variable `resultado_calculo` antes de imprimirla.",
    "starter_code": "# resultado_calculo = (15 + 5) * 2 / 4 - 1\n# print(resultado_calculo)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "15\n",
      "expected_print_count": 1,
      "expected_types": ["int"],
      "strict_variable_names": ["suma_total"],
      "require_variables_in_print": ["suma_total"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_for_loop": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un número decimal (float).",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 5,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 5,
    "order_index": 1,
    "title": "Ejercicio 2.2.1: ¿Puede Conducir?",
    "description": "Crea una función que determine si un usuario puede conducir. Se puede conducir si la edad es >= 18, o si la edad es >= 16 Y tiene permiso de sus padres.",
    "instructions": "Completa la función `puede_conducir` para que devuelva True si el usuario puede conducir, o False en caso contrario. No imprimas nada, solo devuelve el valor booleano.",
    "starter_code": "def puede_conducir(edad_usuario, tiene_permiso_padres):\n    # Escribe tu lógica aquí y devuelve True o False\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "puede_conducir",
          "scenarios": [
            {"args": [20, false], "expected_return_value": true},
            {"args": [18, false], "expected_return_value": true},
            {"args": [17, true], "expected_return_value": true},
            {"args": [16, true], "expected_return_value": true},
            {"args": [16, false], "expected_return_value": false},
            {"args": [15, true], "expected_return_value": false}
          ]
        }
      ]
    }
  },
  {
    "id": 6,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 6,
    "order_index": 1,
    "title": "Ejercicio 2.3.1: Calculadora de Edad en Días",
    "description": "Convierte la edad en años a días y muestra el resultado en el formato 'Tienes aproximadamente [X] días de vida.'.",
    "instructions": "1. Lee la edad en años usando `input()`. Asume que siempre será un número.\n2. Convierte la edad leída (que es un string) a un número entero.\n3. Calcula la edad en días (multiplica por 365).\n4. Usa un f-string para imprimir el mensaje en el formato exacto: `Tienes aproximadamente [valor_calculado_dias] días de vida.`.",
    "starter_code": "# Lee la edad como string\nedad_str = input()\n# Convierte a entero\nedad_anios = int(edad_str)\n# Calcula días\nedad_dias = edad_anios * 365\n# Imprime usando f-string\nprint(f\"Tienes aproximadamente {edad_dias} días de vida.\")",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "int", "min": 0, "max": 120 },
      "transform_for_template": "f'Tienes aproximadamente {int(value)*365} días de vida.'",
      "output_format_template": "{var}\n",
      "expected_print_count_per_case": 1,
      "expected_types_per_case": ["str"],
      "num_cases": 5,
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_fstring": true,
      "custom_feedback": {
        "not_fstring": "Usa un f-string para imprimir el mensaje.",
        "wrong_type": "El mensaje impreso debe ser un string.",
        "wrong_print_count": "Se esperaba una sola operación de print por cada caso de prueba."
      }
    }
  },
  {
    "id": 7,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 7,
    "order_index": 1,
    "title": "Ejercicio 2.4.1: Iniciales y Longitud",
    "description": "Crea una función que, dado un nombre completo, devuelva sus iniciales y su longitud total.",
    "instructions": "Completa la función `procesar_nombre`. Debe devolver una tupla que contenga: la primera letra del nombre, la primera letra del apellido y la longitud total del string. Asume que el nombre siempre tendrá un solo espacio.",
    "starter_code": "def procesar_nombre(nombre_completo):\n    # Encuentra el espacio para separar nombre y apellido\n    # Extrae las iniciales y la longitud\n    # Devuelve una tupla, por ejemplo: ('J', 'P', 10)\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "procesar_nombre",
          "scenarios": [
            {"args": ["Juan Perez"], "expected_return_value": ["J", "P", 10]},
            {"args": ["Ana Garcia"], "expected_return_value": ["A", "G", 10]},
            {"args": ["El Risitas"], "expected_return_value": ["E", "R", 10]}
          ]
        }
      ]
    }
  },
  {
    "id": 8,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 8,
    "order_index": 1,
    "title": "Ejercicio 3.1.1: Par o Impar",
    "description": "Dado un número, imprime 'Par' si el número es par, o 'Impar' si es impar.",
    "instructions": "1. Lee un número usando `input()`. Asume que siempre será un número.\n2. Conviértelo a entero.\n3. Usa una estructura `if-else` para determinar si es par o impar.\n4. Imprime la palabra \"Par\" o la palabra \"Impar\" según corresponda.",
    "starter_code": "# Lee el número como string\nnumero_str = input()\n# Conviértelo a entero\nnumero = int(numero_str)\n# Usa if-else para imprimir 'Par' o 'Impar'\n# if ...\n# else ...",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "int", "min": 0, "max": 100 },
      "transform_for_template": "'Par' if int(value) % 2 == 0 else 'Impar'",
      "output_format_template": "{var}\n",
      "expected_print_count_per_case": 1,
      "expected_types_per_case": ["str"],
      "num_cases": 5,
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_if_statement": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un string ('Par' o 'Impar').",
        "wrong_print_count": "Se esperaba una sola operación de print por cada caso de prueba."
      }
    }
  },
  {
    "id": 9,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 9,
    "order_index": 1,
    "title": "Ejercicio 3.2.1: Suma con For",
    "description": "Calcula la suma de todos los números enteros desde 1 hasta 5 (inclusive) utilizando un bucle for. Imprime el resultado.",
    "instructions": "1. Inicializa una variable `suma_total` a 0.\n2. Usa un bucle `for` con `range()` para iterar desde 1 hasta 5.\n3. En cada iteración, añade el número actual a `suma_total`.\n4. Después del bucle, imprime el valor final de `suma_total`.",
    "starter_code": "suma_total = 0\n# Escribe tu bucle for aquí\nfor i in range(1, 6):\n    suma_total += i\nprint(suma_total)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "15\n",
      "expected_print_count": 1,
      "expected_types": ["int"],
      "strict_variable_names": ["suma_total"],
      "require_variables_in_print": ["suma_total"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_for_loop": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un entero.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 10,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 10,
    "order_index": 1,
    "title": "Ejercicio 3.3.1: Lista de Compras",
    "description": "Crea una lista llamada `compras`. Añade 'huevos' y luego 'pan' a la lista. Finalmente, imprime el segundo elemento de la lista (que debería ser 'pan').",
    "instructions": "1. Define una lista vacía llamada `compras`.\n2. Usa el método `append()` para añadir el string 'huevos' a la lista.\n3. Usa `append()` nuevamente para añadir 'pan'.\n4. Imprime el elemento en el índice 1 de la lista `compras`.",
    "starter_code": "compras = []\n# Añade 'huevos'\n# compras.append('huevos')\n# Añade 'pan'\n# compras.append('pan')\n# Imprime el segundo elemento\n# print(compras[1])",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "pan\n",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "strict_variable_names": ["compras"],
      "require_variables_in_print": ["compras"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_list_append": "compras",
      "custom_feedback": {
        "wrong_type": "El elemento impreso debe ser un string.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 11,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 11,
    "order_index": 1,
    "title": "Ejercicio 3.4.1: Función Área Rectángulo",
    "description": "Define una función `area_rectangulo` que acepte dos argumentos (base y altura) y devuelva el área. Luego, llama a la función con base=4 y altura=6, e imprime el resultado devuelto por la función.",
    "instructions": "1. Define una función llamada `area_rectangulo` que tome dos parámetros: `base` y `altura`.\n2. Dentro de la función, calcula el área (base * altura) y devuélvela usando `return`.\n3. Fuera de la función, llama a `area_rectangulo` con los valores 4 para la base y 6 para la altura.\n4. Imprime el valor que te devuelve la función.",
    "starter_code": "def area_rectangulo(base, altura):\n    # Calcula y devuelve el área\n    return base * altura\n\n# Llama a la función e imprime el resultado\n# resultado = area_rectangulo(4, 6)\n# print(resultado)",
    "validation_type": "function_and_output",
    "validation_rules": {
      "function_rules": {
        "function_name": "area_rectangulo",
        "scenarios": [
          {"args": [4, 6], "expected_return_value": 24, "expected_return_type": "int"},
          {"args": [10, 5], "expected_return_value": 50, "expected_return_type": "int"},
          {"args": [1, 1], "expected_return_value": 1, "expected_return_type": "int"}
        ],
        "require_return_statement": true,
        "require_params_used": true
      },
      "expected_exact_output": "24\n",
      "expected_print_count": 1,
      "expected_types": ["int"]
    }
  },
  {
    "id": 12,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 1,
    "title": "Examen Final: Fundamentos de Python",
    "description": "Resuelve los siguientes ejercicios para demostrar tus conocimientos de variables, tipos, condicionales, bucles, listas y funciones en Python.",
    "instructions": "1. Implementa todas las funciones y tareas solicitadas.\n2. Cada función debe tener el nombre exacto indicado y cumplir con los tipos de entrada y salida especificados.\n3. Lee cuidadosamente cada consigna y asegúrate de que tu código pase todos los casos de prueba.\n\n**Nota sobre 'Ejecutar Código':** Para los exámenes, el botón 'Ejecutar Código' te permitirá probar tus `print()` statements y ver errores de sintaxis. La validación completa de todas las funciones del examen se realizará únicamente cuando presiones 'Enviar Solución'. Es posible que veas un mensaje indicando que el tipo de validación no es soportado para ejecución directa; esto es normal para el modo examen si intentas usar la entrada estándar, concéntrate en la salida de tus `print()` y la correcta definición de las funciones.",
    "starter_code": "def es_par(n):\n    # Tu código aquí\n    return n % 2 == 0\n\n\ndef dias_en_anios(anios):\n    # Tu código aquí\n    return anios * 365\n\n\ndef obtener_segundo(lista):\n    # Tu código aquí\n    if len(lista) >= 2:\n        return lista[1]\n    return None\n\n\ndef suma_rango(inicio, fin):\n    # Tu código aquí\n    suma = 0\n    for i in range(inicio, fin + 1):\n        suma += i\n    return suma\n\n# Si el examen requiere una salida específica de print() en el cuerpo del script,\n# agrégala aquí y define las reglas de validación correspondientes abajo.\n# Ejemplo:\n# print(es_par(4))\n# print(dias_en_anios(1))\n# print(obtener_segundo(['a', 'b']))\n# print(suma_rango(1,3))",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "es_par",
          "scenarios": [
            {"args": [2], "expected_return_value": true, "expected_return_type": "bool"},
            {"args": [3], "expected_return_value": false, "expected_return_type": "bool"},
            {"args": [0], "expected_return_value": true, "expected_return_type": "bool"}
          ]
        },
        {
          "function_name": "dias_en_anios",
          "scenarios": [
            {"args": [1], "expected_return_value": 365, "expected_return_type": "int"},
            {"args": [0], "expected_return_value": 0, "expected_return_type": "int"},
            {"args": [10], "expected_return_value": 3650, "expected_return_type": "int"}
          ]
        },
        {
          "function_name": "obtener_segundo",
          "scenarios": [
            {"args": [[1,2,3]], "expected_return_value": 2, "expected_return_type": "int"},
            {"args": [["a","b","c"]], "expected_return_value": "b", "expected_return_type": "str"},
            {"args": [["uno"]], "expected_return_value": null, "expected_return_type": "NoneType"}
          ]
        },
        {
          "function_name": "suma_rango",
          "scenarios": [
            {"args": [1, 5], "expected_return_value": 15, "expected_return_type": "int"},
            {"args": [3, 3], "expected_return_value": 3, "expected_return_type": "int"},
            {"args": [0, 2], "expected_return_value": 3, "expected_return_type": "int"}
          ]
        }
      ],
      "require_return_statement": true,
      "strict_function_names": ["es_par", "dias_en_anios", "obtener_segundo", "suma_rango"]
    }
  },
  {
    "id": 13,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 2,
    "title": "Examen Final: Lógica y Cadenas",
    "description": "Demuestra tu habilidad con la manipulación de strings y la lógica de programación.",
    "instructions": "Implementa las funciones solicitadas para pasar este examen. Cada función debe devolver el valor esperado, no imprimirlo.",
    "starter_code": "def invertir_cadena(s):\n    # Devuelve la cadena 's' invertida.\n    pass\n\ndef es_palindromo(s):\n    # Devuelve True si 's' es un palíndromo, False si no.\n    # Ignora mayúsculas/minúsculas y espacios.\n    pass\n\ndef contar_vocales(s):\n    # Devuelve el número de vocales (a, e, i, o, u) en 's'.\n    pass\n\ndef es_mayor_de_edad(edad):\n    # Devuelve True si la edad es 18 o más, False en caso contrario.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "invertir_cadena", "scenarios": [{"args": ["hola"], "expected_return_value": "aloh"}, {"args": ["Python"], "expected_return_value": "nohtyP"}, {"args": [""], "expected_return_value": ""}]},
        {"function_name": "es_palindromo", "scenarios": [{"args": ["Anita lava la tina"], "expected_return_value": true}, {"args": ["python"], "expected_return_value": false}, {"args": ["Ojo"], "expected_return_value": true}]},
        {"function_name": "contar_vocales", "scenarios": [{"args": ["murcielago"], "expected_return_value": 5}, {"args": ["xyz"], "expected_return_value": 0}, {"args": ["AEIOU"], "expected_return_value": 5}]},
        {"function_name": "es_mayor_de_edad", "scenarios": [{"args": [20], "expected_return_value": true}, {"args": [18], "expected_return_value": true}, {"args": [17], "expected_return_value": false}]}
      ]
    }
  },
  {
    "id": 14,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 3,
    "title": "Examen Final: Algoritmos y Listas",
    "description": "Implementa algoritmos fundamentales de matemáticas y listas.",
    "instructions": "Completa el código de las funciones para que pasen las pruebas. No uses funciones integradas como max() o sum() a menos que se permita.",
    "starter_code": "def factorial(n):\n    # Devuelve el factorial de n.\n    pass\n\ndef encontrar_maximo(lista):\n    # Devuelve el número más grande en la lista sin usar max().\n    pass\n\ndef filtrar_pares(lista):\n    # Devuelve una nueva lista solo con los números pares de la lista original.\n    pass\n\ndef generar_saludo(nombre, edad):\n    # Devuelve un string con el formato 'Hola [nombre], tienes [edad] años.'\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "factorial", "scenarios": [{"args": [5], "expected_return_value": 120}, {"args": [0], "expected_return_value": 1}, {"args": [1], "expected_return_value": 1}]},
        {"function_name": "encontrar_maximo", "scenarios": [{"args": [[1, 5, 2, 9, 3]], "expected_return_value": 9}, {"args": [[-1, -5, -2]], "expected_return_value": -1}, {"args": [[10]], "expected_return_value": 10}]},
        {"function_name": "filtrar_pares", "scenarios": [{"args": [[1, 2, 3, 4, 5, 6]], "expected_return_value": [2, 4, 6]}, {"args": [[1, 3, 5]], "expected_return_value": []}, {"args": [[-2, 0, 2]], "expected_return_value": [-2, 0, 2]}]},
        {"function_name": "generar_saludo", "scenarios": [{"args": ["Carlos", 30], "expected_return_value": "Hola Carlos, tienes 30 años."}, {"args": ["Maria", 22], "expected_return_value": "Hola Maria, tienes 22 años."}]}
      ]
    }
  },
  {
    "id": 15,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 4,
    "title": "Examen Final: Procesamiento de Datos",
    "description": "Escribe funciones para procesar colecciones de datos como listas.",
    "instructions": "Asegúrate de que cada función devuelva el tipo de dato correcto y maneje casos especiales como listas vacías.",
    "starter_code": "def promedio_de_lista(lista):\n    # Devuelve el promedio de los números en la lista. Si la lista está vacía, devuelve 0.\n    pass\n\ndef eliminar_duplicados(lista):\n    # Devuelve una nueva lista sin elementos duplicados, manteniendo el orden original.\n    pass\n\ndef unir_listas(lista1, lista2):\n    # Devuelve una nueva lista que es la unión de lista1 y lista2.\n    pass\n\ndef convertir_a_fahrenheit(celsius):\n    # Convierte grados Celsius a Fahrenheit usando la fórmula (C * 9/5) + 32.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "promedio_de_lista", "scenarios": [{"args": [[10, 20, 30]], "expected_return_value": 20.0}, {"args": [[5, 5, 5]], "expected_return_value": 5.0}, {"args": [[]], "expected_return_value": 0}]},
        {"function_name": "eliminar_duplicados", "scenarios": [{"args": [[1, 2, 2, 3, 1]], "expected_return_value": [1, 2, 3]}, {"args": [["a", "b", "a"]], "expected_return_value": ["a", "b"]}, {"args": [[4, 5, 6]], "expected_return_value": [4, 5, 6]}]},
        {"function_name": "unir_listas", "scenarios": [{"args": [[1, 2], [3, 4]], "expected_return_value": [1, 2, 3, 4]}, {"args": [[], [1, 2]], "expected_return_value": [1, 2]}]},
        {"function_name": "convertir_a_fahrenheit", "scenarios": [{"args": [0], "expected_return_value": 32.0}, {"args": [100], "expected_return_value": 212.0}, {"args": [-10], "expected_return_value": 14.0}]}
      ]
    }
  },
  {
    "id": 16,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 5,
    "title": "Examen Final: Lógica Condicional y Bucles",
    "description": "Resuelve problemas que requieren una lógica condicional más compleja y el uso de bucles.",
    "instructions": "Presta atención a los casos borde en cada función y asegúrate de que los bucles terminen correctamente.",
    "starter_code": "def clasificar_calificacion(nota):\n    # Devuelve 'Aprobado' (50-69), 'Notable' (70-89), o 'Sobresaliente' (90-100). 'Suspenso' para el resto.\n    pass\n\ndef es_bisiesto(anio):\n    # Devuelve True si el año es bisiesto, False si no.\n    # Un año es bisiesto si es divisible por 4, excepto los años que son divisibles por 100 pero no por 400.\n    pass\n\ndef suma_acumulada(lista):\n    # Devuelve una lista donde cada elemento es la suma de los elementos hasta esa posición.\n    # Ejemplo: [1, 2, 3] -> [1, 3, 6]\n    pass\n\ndef adivina_numero(secreto, intento):\n    # Devuelve 'Correcto', 'Muy alto' o 'Muy bajo'.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "clasificar_calificacion", "scenarios": [{"args": [95], "expected_return_value": "Sobresaliente"}, {"args": [80], "expected_return_value": "Notable"}, {"args": [60], "expected_return_value": "Aprobado"}, {"args": [40], "expected_return_value": "Suspenso"}]},
        {"function_name": "es_bisiesto", "scenarios": [{"args": [2024], "expected_return_value": true}, {"args": [1900], "expected_return_value": false}, {"args": [2000], "expected_return_value": true}, {"args": [2023], "expected_return_value": false}]},
        {"function_name": "suma_acumulada", "scenarios": [{"args": [[1, 2, 3, 4]], "expected_return_value": [1, 3, 6, 10]}, {"args": [[10, -5, 3]], "expected_return_value": [10, 5, 8]}, {"args": [[]], "expected_return_value": []}]},
        {"function_name": "adivina_numero", "scenarios": [{"args": [50, 50], "expected_return_value": "Correcto"}, {"args": [50, 70], "expected_return_value": "Muy alto"}, {"args": [50, 30], "expected_return_value": "Muy bajo"}]}
      ]
    }
  },
  {
    "id": 17,
    "course_id": 2,
    "module_id": 5,
    "lesson_id": 12,
    "order_index": 1,
    "title": "Ejercicio 1.1.1:  Acceso a elementos en tuplas",
    "description": "Aprende a acceder a elementos de una tupla usando índices positivos y negativos.",
    "instructions": "1. Dada la tupla `dias` que contiene los días de la semana.\n2. Imprime el primer día (índice positivo).\n3. Imprime el último día (índice negativo).\n4. Imprime el día que está en la posición 3 (Jueves).",
    "starter_code": "# Dada la tupla con los días de la semana\ndias = (\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\")\n\n# Imprime el primer día\nprint(dias[0])\n\n# Imprime el último día\nprint(dias[-1])\n\n# Imprime el día en la posición 3\nprint(dias[3])",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "lunes\ndomingo\njueves\n",
      "expected_print_count": 3,
      "expected_types": ["str", "str", "str"],
      "strict_whitespace": true,
      "case_sensitive": true
    }
  },
  {
    "id": 18,
    "course_id": 2,
    "module_id": 5,
    "lesson_id": 13,
    "order_index": 1,
    "title": "Ejercicio 1.2:  Sets, elementos únicos y operaciones",
    "description": "Practica con sets en Python creando dos conjuntos de números, aplicando operaciones de unión, intersección y eliminando un elemento.",
    "instructions": "1. Dados los sets `conjunto1` y `conjunto2`.\n2. Imprime la unión de ambos conjuntos. Para que la salida sea predecible, conviértela a una lista y ordénala antes de imprimir.\n3. Imprime la intersección, también como una lista ordenada.\n4. Elimina el número 2 de `conjunto1` usando `.remove()`.\n5. Imprime `conjunto1` como una lista ordenada para verificar el resultado.",
    "starter_code": "# Dados los sets\nconjunto1 = {1, 2, 3, 2, 4}\nconjunto2 = {3, 4, 5, 5}\n\n# Imprime la unión ordenada\nprint(sorted(list(conjunto1 | conjunto2)))\n\n# Imprime la intersección ordenada\nprint(sorted(list(conjunto1 & conjunto2)))\n\n# Elimina un número y muestra el resultado ordenado\nconjunto1.remove(2)\nprint(sorted(list(conjunto1)))",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "[1, 2, 3, 4, 5]\n[3, 4]\n[1, 3, 4]\n",
      "expected_print_count": 3,
      "expected_types": ["list", "list", "list"],
      "strict_whitespace": true
    }
  },
  {
    "id": 19,
    "course_id": 2,
    "module_id": 5,
    "lesson_id": 14,
    "order_index": 1,
    "title": "Ejercicio 1.3:  Diccionarios, claves, valores y recorrido",
    "description": "Descubre cómo manejar información estructurada mediante diccionarios en Python.",
    "instructions": "1. Dado el diccionario `mascota`.\n2. Agrega una nueva clave `vacunado` con el valor `True`.\n3. Modifica la `edad` de la mascota a 6.\n4. Recorre el diccionario e imprime cada clave y valor en el formato 'clave: valor'.",
    "starter_code": "# Crea el diccionario de la mascota\nmascota = {\n    \"nombre\": \"Rocky\",\n    \"tipo\": \"perro\",\n    \"edad\": 5\n}\n\n# Agrega la clave 'vacunado'\nmascota['vacunado'] = True\n\n# Modifica la edad\nmascota['edad'] = 6\n\n# Recorre y muestra el diccionario\nfor clave, valor in mascota.items():\n    print(f\"{clave}: {valor}\")",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "nombre: Rocky\ntipo: perro\nedad: 6\nvacunado: True\n",
      "expected_print_count": 4,
      "expected_types": ["str", "str", "str", "str"],
      "strict_whitespace": true
    }
  },
  {
    "id": 20,
    "course_id": 2,
    "module_id": 6,
    "lesson_id": 15,
    "order_index": 1,
    "title": "Ejercicio 2.1:  Lista de listas - recorrido",
    "description": "Crea y recorre una lista de listas (matriz) que contenga nombres organizados por filas.",
    "instructions": "1. Dada la lista `datos` que contiene 3 listas internas.\n2. Usa dos bucles `for` anidados para recorrer cada fila y cada nombre.\n3. Imprime cada nombre en pantalla, uno por uno, en el orden en que aparecen.\n4. Usa `end=\" \"` para imprimir los nombres en la misma línea por fila, y `print()` para hacer salto de línea entre filas.",
    "starter_code": "# Dada la matriz de datos\ndatos = [\n    [\"Ana\", \"Luis\", \"Carlos\"],\n    [\"María\", \"Jorge\", \"Sofía\"],\n    [\"Pedro\", \"Lucía\", \"Elena\"]\n]\n\n# Recorre la matriz e imprime los nombres\nfor fila in datos:\n    for nombre in fila:\n        print(nombre, end=\" \")\n    print()",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Ana Luis Carlos \nMaría Jorge Sofía \nPedro Lucía Elena \n",
      "expected_print_count": 4,
      "strict_whitespace": false
    }
  },
  {
    "id": 21,
    "course_id": 2,
    "module_id": 6,
    "lesson_id": 16,
    "order_index": 1,
    "title": "Ejercicio 2.2:  Diccionario de listas - Equipos deportivos",
    "description": "Crea un diccionario donde cada clave representa un equipo deportivo y su valor es una lista con nombres de jugadores. Luego muestra los jugadores del equipo de basquet.",
    "instructions": "1. Dado el diccionario `equipos`.\n2. Imprime únicamente la lista de nombres del equipo de \"basquet\" usando `print()`.",
    "starter_code": "# Crea el diccionario con los equipos y jugadores\nequipos = {\n    \"futbol\": [\"Messi\", \"Ronaldo\"],\n    \"basquet\": [\"LeBron\", \"Jordan\"],\n    \"voley\": [\"Giba\", \"Bruno\"]\n}\n\n# Muestra el equipo de basquet usando print()\nprint(equipos[\"basquet\"])",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "['LeBron', 'Jordan']\n",
      "expected_print_count": 1,
      "expected_types": ["list"],
      "strict_whitespace": true
    }
  },
  {
    "id": 22,
    "course_id": 2,
    "module_id": 6,
    "lesson_id": 17,
    "order_index": 1,
    "title": "Ejercicio 2.3:  Recorriendo estructuras anidadas",
    "description": "Dado un diccionario de productos, muestra en pantalla cada categoría y los productos correspondientes.",
    "instructions": "1. Dado el diccionario `productos`.\n2. Recorre el diccionario usando un ciclo `for` y muestra:\n   - El nombre de la categoría en el formato 'Categoría: [nombre]'.\n   - Cada producto dentro de esa categoría, uno por línea y con guion delante (ej: ' - producto').",
    "starter_code": "productos = {\n    'frutas': ['manzana', 'pera'],\n    'verduras': ['zanahoria', 'lechuga']\n}\n\n# Recorre el diccionario con un ciclo for\nfor categoria, items in productos.items():\n    print(f\"Categoría: {categoria}\")\n    for item in items:\n        print(f\" - {item}\")",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Categoría: frutas\n - manzana\n - pera\nCategoría: verduras\n - zanahoria\n - lechuga\n",
      "expected_print_count": 6,
      "strict_whitespace": true
    }
  },
  {
    "id": 23,
    "course_id": 2,
    "module_id": 7,
    "lesson_id": 18,
    "order_index": 1,
    "title": "Ejercicio 3.1:  Manejo de errores con try/except",
    "description": "Escribe un programa que pida al usuario un número entero. Si el usuario ingresa un valor no válido, muestra el mensaje: \"Error: No ingresaste un número válido.\".",
    "instructions": "1. Lee la entrada del usuario con `input()`.\n2. Usa un bloque try/except para capturar el `ValueError` que ocurre al intentar convertir un texto a entero.\n3. Si la conversión es exitosa, imprime: \"El número es: [número]\".\n4. Si ocurre el error, imprime el mensaje indicado.",
    "starter_code": "entrada = input()\ntry:\n    numero = int(entrada)\n    print(f\"El número es: {numero}\")\nexcept ValueError:\n    print(\"Error: No ingresaste un número válido.\")",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "mixed", "values": ["10", "abc", "0", "-5"] },
      "transform_for_template": "f'El número es: {int(value)}' if value.lstrip('-').isdigit() else 'Error: No ingresaste un número válido.'",
      "output_format_template": "{var}\n",
      "num_cases": 4
    }
  },
  {
    "id": 24,
    "course_id": 2,
    "module_id": 7,
    "lesson_id": 19,
    "order_index": 1,
    "title": "Ejercicio 3.2:  Captura de errores comunes",
    "description": "Escribe un programa que pida dos números enteros (dividendo y divisor) y muestre el resultado de la división. Debes usar bloques try/except para capturar y manejar los errores ValueError y ZeroDivisionError.",
    "instructions": "1. Solicita al usuario que ingrese el dividendo y el divisor (en dos `input()` separados).\n2. Realiza la división dentro de un bloque try.\n3. Captura `ValueError` si el usuario no ingresa un número válido y muestra: \"Error: Debes ingresar un número válido.\"\n4. Captura `ZeroDivisionError` si se intenta dividir por cero y muestra: \"Error: No se puede dividir entre cero.\"\n5. Si la división es exitosa, muestra el resultado con el formato: \"Resultado: [valor]\".",
    "starter_code": "dividendo_str = input()\ndivisor_str = input()\ntry:\n    dividendo = int(dividendo_str)\n    divisor = int(divisor_str)\n    resultado = dividendo / divisor\n    print(f\"Resultado: {resultado}\")\nexcept ValueError:\n    print(\"Error: Debes ingresar un número válido.\")\nexcept ZeroDivisionError:\n    print(\"Error: No se puede dividir entre cero.\")",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "multi_input", "values": [["10", "2"], ["10", "0"], ["10", "abc"]] },
      "transform_for_template": "f'Resultado: {int(value[0])/int(value[1])}' if value[1] != '0' and value[1].isdigit() else ('Error: No se puede dividir entre cero.' if value[1] == '0' else 'Error: Debes ingresar un número válido.')",
      "output_format_template": "{var}\n",
      "num_cases": 3
    }
  },
  {
    "id": 25,
    "course_id": 2,
    "module_id": 7,
    "lesson_id": 20,
    "order_index": 1,
    "title": "Ejercicio 3.3:  Manejo de errores con try/except/finally",
    "description": "Escribe un programa que controle errores comunes y valide entradas para evitar fallos. Maneja la entrada de números negativos lanzando un error.",
    "instructions": "1. Pide al usuario un número entero.\n2. Dentro de un bloque `try`, si el número es negativo, lanza un error con `raise ValueError(\"No se permiten números negativos.\")`.\n3. Captura el `ValueError` y muestra su mensaje.\n4. Usa `finally` para imprimir siempre el mensaje \"Proceso finalizado.\" al terminar.\n5. Si el número es positivo o cero, muestra un mensaje de confirmación.",
    "starter_code": "try:\n    num_str = input()\n    numero = int(num_str)\n    if numero < 0:\n        raise ValueError(\"No se permiten números negativos.\")\n    print(f\"Número aceptado: {numero}\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\nfinally:\n    print(\"Proceso finalizado.\")",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "mixed", "values": ["-5", "10", "abc"] },
      "transform_for_template": "f'Error: No se permiten números negativos.\\nProceso finalizado.' if value == '-5' else (f'Número aceptado: 10\\nProceso finalizado.' if value == '10' else 'Error: invalid literal for int() with base 10: \\'abc\\'\\nProceso finalizado.')",
      "output_format_template": "{var}\n",
      "num_cases": 3
    }
  },
  {
    "id": 26,
    "course_id": 2,
    "module_id": 7,
    "lesson_id": 21,
    "order_index": 1,
    "title": "Ejercicio 3.4:  Transformación de listas con for y list comprehensions",
    "description": "Dado el listado de frutas, realiza varias transformaciones y muestra los resultados.",
    "instructions": "1. Dada la lista `frutas`.\n2. Usando un ciclo `for`, crea una lista `longitudes` con la cantidad de letras de cada fruta e imprímela.\n3. Usando list comprehension, crea una lista `frutas_largas` con las frutas que tienen más de 5 letras e imprímela.\n4. En una sola línea con list comprehension, crea una lista `longitudes_largas` con la longitud de las frutas que tienen más de 5 letras e imprímela.",
    "starter_code": "frutas = ['manzana', 'pera', 'banana', 'kiwi', 'sandía']\n\nlongitudes = []\nfor fruta in frutas:\n    longitudes.append(len(fruta))\nprint(longitudes)\n\nfrutas_largas = [fruta for fruta in frutas if len(fruta) > 5]\nprint(frutas_largas)\n\nlongitudes_largas = [len(fruta) for fruta in frutas if len(fruta) > 5]\nprint(longitudes_largas)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "[7, 4, 6, 4, 6]\n['manzana', 'banana', 'sandía']\n[7, 6, 6]\n",
      "expected_print_count": 3,
      "expected_types": ["list", "list", "list"]
    }
  },
  {
    "id": 27,
    "course_id": 2,
    "module_id": 7,
    "lesson_id": 22,
    "order_index": 1,
    "title": "Ejercicio 3.5:  Ordenar y filtrar con funciones lambda",
    "description": "Crea dos funciones que usen lambdas para ordenar y filtrar listas.",
    "instructions": "1. Completa la función `ordenar_nombres_sin_case` para que ordene la lista de nombres ignorando mayúsculas/minúsculas.\n2. Completa la función `filtrar_pares` para que devuelva solo los números pares de una lista.",
    "starter_code": "def ordenar_nombres_sin_case(nombres):\n    # Usa sorted() con una lambda como key para ordenar\n    pass\n\ndef filtrar_pares(numeros):\n    # Usa filter() con una lambda y convierte el resultado a lista\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "ordenar_nombres_sin_case",
          "scenarios": [
            {"args": [["Ana", "luis", "Carlos", "maria"]], "expected_return_value": ["Ana", "Carlos", "luis", "maria"]},
            {"args": [["Zebra", "apple", "Banana"]], "expected_return_value": ["apple", "Banana", "Zebra"]}
          ]
        },
        {
          "function_name": "filtrar_pares",
          "scenarios": [
            {"args": [[1, 2, 3, 4, 5, 6]], "expected_return_value": [2, 4, 6]},
            {"args": [[11, 23, 45]], "expected_return_value": []},
            {"args": [[-2, 0, 8, 9]], "expected_return_value": [-2, 0, 8]}
          ]
        }
      ]
    }
  },
  {
    "id": 28,
    "course_id": 2,
    "module_id": null,
    "lesson_id": null,
    "order_index": 1,
    "title": "Examen Final: Estructuras de Datos",
    "description": "Demuestra tu conocimiento de tuplas, sets y diccionarios en Python implementando las siguientes funciones.",
    "instructions": "Completa el cuerpo de cada función para que devuelva el resultado esperado. No modifiques los nombres de las funciones ni sus parámetros.",
    "starter_code": "def obtener_extremos_tupla(tupla):\n    # Devuelve una nueva tupla con el primer y último elemento de la tupla de entrada.\n    # Si la tupla tiene menos de 2 elementos, devuelve una tupla vacía.\n    pass\n\ndef elementos_comunes(set_a, set_b):\n    # Devuelve un nuevo set con los elementos comunes entre set_a y set_b.\n    pass\n\ndef actualizar_mascota(mascota, nueva_edad, esta_vacunado):\n    # Actualiza el diccionario 'mascota' con la nueva_edad y agrega la clave 'vacunado'.\n    # Devuelve el diccionario modificado.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "obtener_extremos_tupla",
          "scenarios": [
            {"args": [["a", "b", "c", "d"]], "expected_return_value": ["a", "d"]},
            {"args": [[1, 2]], "expected_return_value": [1, 2]},
            {"args": [["x"]], "expected_return_value": []}
          ]
        },
        {
          "function_name": "elementos_comunes",
          "scenarios": [
            {"args": [[1, 2, 3], [3, 4, 5]], "expected_return_value": [3]},
            {"args": [["a", "b"], ["c", "d"]], "expected_return_value": []},
            {"args": [[10, 20], [10, 20]], "expected_return_value": [10, 20]}
          ]
        },
        {
          "function_name": "actualizar_mascota",
          "scenarios": [
            {"args": [{"nombre": "Rex", "edad": 5}, 6, true], "expected_return_value": {"nombre": "Rex", "edad": 6, "vacunado": true}},
            {"args": [{"nombre": "Miau", "tipo": "gato"}, 2, false], "expected_return_value": {"nombre": "Miau", "tipo": "gato", "edad": 2, "vacunado": false}}
          ]
        }
      ]
    }
  },
  {
    "id": 29,
    "course_id": 2,
    "module_id": null,
    "lesson_id": null,
    "order_index": 2,
    "title": "Examen Final: Lógica con Colecciones",
    "description": "Demuestra tu conocimiento de tuplas, sets y diccionarios en Python.",
    "instructions": "Completa cada función según lo solicitado.",
    "starter_code": "def obtener_ultima_vocal(vocales):\n    # Dada una tupla de vocales, devuelve la última.\n    pass\n\ndef crear_set_sin_duplicados(lista):\n    # Dada una lista, devuelve un set con elementos únicos.\n    pass\n\ndef agregar_jugador(equipos, equipo, jugador):\n    # Agrega un jugador a la lista de un equipo en el diccionario.\n    # Devuelve el diccionario actualizado.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "obtener_ultima_vocal", "scenarios": [{"args": [["a", "e", "i", "o", "u"]], "expected_return_value": "u"}]},
        {"function_name": "crear_set_sin_duplicados", "scenarios": [{"args": [[10, 20, 10, 30, 20]], "expected_return_value": [10, 20, 30]}]},
        {"function_name": "agregar_jugador", "scenarios": [{"args": [{"futbol": ["Ana"], "voley": ["Juan"]}, "voley", "Laura"], "expected_return_value": {"futbol": ["Ana"], "voley": ["Juan", "Laura"]}}]}
      ]
    }
  },
  {
    "id": 30,
    "course_id": 2,
    "module_id": null,
    "lesson_id": null,
    "order_index": 3,
    "title": "Examen Final: Estructuras Anidadas y Errores",
    "description": "Demuestra tu conocimiento de listas anidadas, list comprehensions y manejo de errores.",
    "instructions": "Completa cada función según lo solicitado.",
    "starter_code": "def obtener_elemento_matriz(matriz, fila, columna):\n    # Devuelve el elemento en la fila y columna especificadas.\n    pass\n\ndef filtrar_frutas_largas(frutas):\n    # Devuelve una lista de las frutas que tienen más de 5 letras.\n    pass\n\ndef dividir_numeros(a, b):\n    # Devuelve el resultado de a/b. Si hay un error, devuelve un string con el nombre del error.\n    # Ejemplo: si b es 0, devuelve 'ZeroDivisionError'.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "obtener_elemento_matriz", "scenarios": [{"args": [[["a", "b"], ["c", "d"]], 1, 0], "expected_return_value": "c"}]},
        {"function_name": "filtrar_frutas_largas", "scenarios": [{"args": [["manzana", "pera", "banana", "kiwi"]], "expected_return_value": ["manzana", "banana"]}]},
        {"function_name": "dividir_numeros", "scenarios": [{"args": [10, 2], "expected_return_value": 5.0}, {"args": [10, 0], "expected_return_value": "ZeroDivisionError"}, {"args": [10, "a"], "expected_return_value": "TypeError"}]}
      ]
    }
  },
  {
    "id": 31,
    "course_id": 2,
    "module_id": null,
    "lesson_id": null,
    "order_index": 4,
    "title": "Examen Final: Lambdas y Archivos",
    "description": "Demuestra tu conocimiento de diccionarios, funciones lambda y manejo de errores de archivos.",
    "instructions": "Completa cada función según lo solicitado.",
    "starter_code": "def actualizar_libro(libro):\n    # Agrega 'genero': 'Realismo mágico' y modifica el año a 1970. Devuelve el libro.\n    pass\n\ndef filtrar_nombres_con_a(nombres):\n    # Usa una función lambda y filter para devolver nombres que empiezan con 'a' o 'A'.\n    pass\n\ndef leer_archivo(nombre_archivo):\n    # Intenta leer un archivo. Si no existe, devuelve 'FileNotFoundError'.\n    # Esta función no se puede probar automáticamente, pero impleméntala como si pudieras.\n    return 'Not tested'",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "actualizar_libro", "scenarios": [{"args": [{"título": "Cien años de soledad", "autor": "García Márquez", "año": 1967}], "expected_return_value": {"título": "Cien años de soledad", "autor": "García Márquez", "año": 1970, "genero": "Realismo mágico"}}]},
        {"function_name": "filtrar_nombres_con_a", "scenarios": [{"args": [["Ana", "luis", "Carlos", "alicia"]], "expected_return_value": ["Ana", "alicia"]}]},
        {"function_name": "leer_archivo", "scenarios": [{"args": ["dummy.txt"], "expected_return_value": "Not tested"}]}
      ]
    }
  },
  {
    "id": 32,
    "course_id": 2,
    "module_id": null,
    "lesson_id": null,
    "order_index": 5,
    "title": "Examen Final: Procesamiento de Datos Avanzado",
    "description": "Demuestra tu conocimiento de estructuras anidadas, list comprehensions y sets.",
    "instructions": "Completa cada función según lo solicitado.",
    "starter_code": "def formatear_productos(productos):\n    # Devuelve una lista de strings, donde cada string es 'categoría: producto1, producto2'.\n    pass\n\ndef convertir_a_fahrenheit(temperaturas_c):\n    # Usa list comprehension para convertir una lista de Celsius a Fahrenheit.\n    pass\n\ndef son_disjuntos(set_a, set_b):\n    # Devuelve True si los sets no tienen elementos en común, False en caso contrario.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "formatear_productos", "scenarios": [{"args": [{"frutas": ["manzana", "pera"], "lacteos": ["leche"]}], "expected_return_value": ["frutas: manzana, pera", "lacteos: leche"]}]},
        {"function_name": "convertir_a_fahrenheit", "scenarios": [{"args": [[0, 10, 100]], "expected_return_value": [32.0, 50.0, 212.0]}]},
        {"function_name": "son_disjuntos", "scenarios": [{"args": [[1, 2], [3, 4]], "expected_return_value": true}, {"args": [[1, 2], [2, 3]], "expected_return_value": false}]}
      ]
    }
  }
]
