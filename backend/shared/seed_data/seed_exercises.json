[
  {
    "id": 1,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 1,
    "order_index": 1,
    "title": "Ejercicio 1.1.1: ¿Qué es Python?",
    "description": "Responde: ¿Cuál es una de las principales razones por las que Python es popular para principiantes?",
    "instructions": "1. Tu objetivo es imprimir una frase específica en la consola.\n2. Utiliza la función `print()` de Python para esta tarea.\n3. La frase exacta que debes imprimir es: `Su sintaxis es clara y legible`.\n4. Asegúrate de que esta frase esté encerrada entre comillas (simples `'` o dobles `\"`) para que Python la interprete como un string (texto).\n   Por ejemplo: `print(\"Texto de ejemplo\")`.",
    "starter_code": "# Utiliza la función print() para mostrar la respuesta exacta.\nprint(\"...\")",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Su sintaxis es clara y legible\n",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "missing_newline": "Recuerda terminar tu print con un salto de línea.",
        "wrong_case": "Revisa las mayúsculas y minúsculas.",
        "extra_spaces": "No agregues espacios extra al final o inicio.",
        "wrong_type": "Asegúrate de que estás imprimiendo un texto (string).",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 2,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 2,
    "order_index": 1,
    "title": "Ejercicio 1.2.1: Saludo Personalizado",
    "description": "Escribe un programa que lea un nombre y luego imprima '¡Hola, [Nombre]!' en pantalla, reemplazando [Nombre] con el nombre leído.",
    "instructions": "1. Utiliza la función `input()` para leer un nombre que será proporcionado por el sistema. No necesitas mostrar un mensaje dentro de `input()` (ej. `nombre = input()` es suficiente).\n2. Almacena el nombre leído en una variable llamada `nombre`.\n3. Utiliza la función `print()` para mostrar el saludo.\n4. Para incluir el valor de tu variable `nombre` dentro del mensaje, puedes usar un f-string. El formato del mensaje debe ser: `¡Hola, [valor de la variable nombre]!`.\n   Ejemplo de cómo usar un f-string: `print(f\"¡Hola, {nombre}!\")`.\n5. Asegúrate de que la salida final sea exactamente como se espera, incluyendo los signos de exclamación.",
    "starter_code": "nombre = input()\nprint(f\"¡Hola, {nombre}!\")",
    "validation_type": "saludo_personalizado",
    "validation_rules": {
      "requires_input_function": true,
      "output_format_template": "¡Hola, {var}!",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "submission_test_strategy": {
        "type": "generated_inputs",
        "count": 3,
        "input_constraints": {
          "type": "string",
          "min_length": 3,
          "max_length": 10,
          "charset": "alpha"
        }
      },
      "target_variable_names": ["nombre"],
      "require_fstring": true,
      "custom_feedback": {
        "missing_input": "Debes usar la función input() para leer el nombre.",
        "wrong_variable": "La variable debe llamarse 'nombre' y usarse en el print.",
        "not_fstring": "Usa un f-string para imprimir el saludo.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    },
    "difficulty": "Fácil",
    "estimated_time_minutes": 5,
    "tags": ["input", "print", "f-strings", "variables"]
  },
  {
    "id": 3,
    "course_id": 1,
    "module_id": 1,
    "lesson_id": 3,
    "order_index": 1,
    "title": "Ejercicio 1.3.1: Variables y Tipos",
    "description": "Crea una variable 'ciudad' con el valor \"Madrid\" y una variable `poblacion` con el valor 3300000. Imprime ambas variables, cada una en una nueva línea.",
    "instructions": "1. Define una variable llamada `ciudad` y asígnale el valor de string \"Madrid\".\n2. Define otra variable llamada `poblacion` y asígnale el valor numérico (entero) 3300000.\n3. Utiliza la función `print()` para mostrar el valor de la variable `ciudad` en la consola.\n4. En una línea separada, utiliza nuevamente la función `print()` para mostrar el valor de la variable `poblacion`.",
    "starter_code": "# 1. Define la variable ciudad\n\n# 2. Define la variable poblacion\n\n# 3. Imprime la variable ciudad\n\n# 4. Imprime la variable poblacion",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "Madrid\n3300000\n",
      "expected_print_count": 2,
      "strict_variable_names": ["ciudad", "poblacion"],
      "expected_types": ["str", "int"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "Verifica que el primer print sea de un string ('ciudad') y el segundo de un entero ('poblacion').",
        "wrong_variable": "Debes usar los nombres de variable exactos: 'ciudad' y 'poblacion', y asegurarte de que se definan y usen correctamente.",
        "wrong_print_count": "Se esperaban dos operaciones de print."
      }
    }
  },
  {
    "id": 4,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 4,
    "order_index": 1,
    "title": "Ejercicio 2.1.1: Operaciones Básicas",
    "description": "Calcula el resultado de la expresión matemática (15 + 5) * 2 / 4 - 1 e imprímelo en la consola.",
    "instructions": "Escribe la expresión matemática directamente en tu código y usa print para mostrar el resultado. Puedes asignar el resultado a una variable `resultado_calculo` antes de imprimirla.",
    "starter_code": "# resultado_calculo = (15 + 5) * 2 / 4 - 1\n# print(resultado_calculo)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "9.0\n",
      "expected_print_count": 1,
      "expected_types": ["float"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un número decimal (float).",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 5,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 5,
    "order_index": 1,
    "title": "Ejercicio 2.2.1: ¿Puede Conducir?",
    "description": "Dadas las variables edad_usuario y tiene_permiso_padres, determina si el usuario puede conducir. Imprime True si puede conducir, o False en caso contrario. Considera que se puede conducir si edad_usuario es >= 18, o si edad_usuario es >= 16 Y tiene_permiso_padres es True.",
    "instructions": "Usa operadores lógicos para determinar si se puede conducir. Asigna el resultado booleano a la variable `puede_conducir`. Finalmente, imprime el valor de `puede_conducir`.",
    "starter_code": "edad_usuario = 17\ntiene_permiso_padres = True\n# Calcula puede_conducir aquí\npuede_conducir = (edad_usuario >= 18) or (edad_usuario >= 16 and tiene_permiso_padres)\nprint(puede_conducir)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "True\n",
      "expected_print_count": 1,
      "expected_types": ["bool"],
      "strict_variable_names": ["puede_conducir", "edad_usuario", "tiene_permiso_padres"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser booleano (True o False).",
        "wrong_variable": "Asegúrate de definir y usar las variables 'edad_usuario', 'tiene_permiso_padres', y que 'puede_conducir' contenga el resultado lógico.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 6,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 6,
    "order_index": 1,
    "title": "Ejercicio 2.3.1: Calculadora de Edad en Días",
    "description": "Convierte la edad en años a días y muestra el resultado en el formato 'Tienes aproximadamente [X] días de vida.'.",
    "instructions": "1. Lee la edad en años usando `input()`. Asume que siempre será un número.\n2. Convierte la edad leída (que es un string) a un número entero.\n3. Calcula la edad en días (multiplica por 365).\n4. Usa un f-string para imprimir el mensaje en el formato exacto: `Tienes aproximadamente [valor_calculado_dias] días de vida.`.",
    "starter_code": "# Lee la edad como string\nedad_str = input()\n# Convierte a entero\nedad_anios = int(edad_str)\n# Calcula días\nedad_dias = edad_anios * 365\n# Imprime usando f-string\nprint(f\"Tienes aproximadamente {edad_dias} días de vida.\")",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "int", "min": 0, "max": 120 },
      "transform_for_template": "f'Tienes aproximadamente {int(value)*365} días de vida.'",
      "output_format_template": "{var}\n",
      "expected_print_count_per_case": 1,
      "expected_types_per_case": ["str"],
      "num_cases": 5,
      "strict_whitespace": true,
      "case_sensitive": true,
      "require_fstring": true,
      "custom_feedback": {
        "not_fstring": "Usa un f-string para imprimir el mensaje.",
        "wrong_type": "El mensaje impreso debe ser un string.",
        "wrong_print_count": "Se esperaba una sola operación de print por cada caso de prueba."
      }
    }
  },
  {
    "id": 7,
    "course_id": 1,
    "module_id": 2,
    "lesson_id": 7,
    "order_index": 1,
    "title": "Ejercicio 2.4.1: Iniciales y Longitud",
    "description": "Dada la variable nombre_completo, muestre la primera letra del nombre, la primera letra del apellido y la longitud total del nombre completo, cada resultado en una nueva línea.",
    "instructions": "1. Se te da una variable `nombre_completo` (ej: \"Juan Perez\").\n2. Imprime la primera letra del nombre (el primer carácter de `nombre_completo`).\n3. Imprime la primera letra del apellido (asume que el apellido empieza después del primer espacio).\n4. Imprime la longitud total de `nombre_completo` usando `len()`.\n5. Cada uno de estos tres resultados debe imprimirse en una nueva línea.",
    "starter_code": "nombre_completo = \"Juan Perez\"\n# Imprime la primera letra del nombre\n# print(nombre_completo[0])\n# Encuentra el espacio y luego imprime la primera letra del apellido\n# espacio_idx = nombre_completo.find(' ')\n# print(nombre_completo[espacio_idx+1])\n# Imprime la longitud total\n# print(len(nombre_completo))",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "J\nP\n10\n",
      "expected_print_count": 3,
      "expected_types": ["str", "str", "int"],
      "strict_variable_names": ["nombre_completo"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "Verifica los tipos: str para iniciales, int para longitud.",
        "wrong_print_count": "Se esperaban tres operaciones de print."
      }
    }
  },
  {
    "id": 8,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 8,
    "order_index": 1,
    "title": "Ejercicio 3.1.1: Par o Impar",
    "description": "Dado un número, imprime 'Par' si el número es par, o 'Impar' si es impar.",
    "instructions": "1. Lee un número usando `input()`. Asume que siempre será un número.\n2. Conviértelo a entero.\n3. Usa una estructura `if-else` para determinar si es par o impar.\n4. Imprime la palabra \"Par\" o la palabra \"Impar\" según corresponda.",
    "starter_code": "# Lee el número como string\nnumero_str = input()\n# Conviértelo a entero\nnumero = int(numero_str)\n# Usa if-else para imprimir 'Par' o 'Impar'\n# if ...\n# else ...",
    "validation_type": "dynamic_output",
    "validation_rules": {
      "requires_input_function": true,
      "input_constraints": { "type": "int", "min": 0, "max": 100 },
      "transform_for_template": "'Par' if int(value) % 2 == 0 else 'Impar'",
      "output_format_template": "{var}\n",
      "expected_print_count_per_case": 1,
      "expected_types_per_case": ["str"],
      "num_cases": 5,
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un string ('Par' o 'Impar').",
        "wrong_print_count": "Se esperaba una sola operación de print por cada caso de prueba."
      }
    }
  },
  {
    "id": 9,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 9,
    "order_index": 1,
    "title": "Ejercicio 3.2.1: Suma con For",
    "description": "Calcula la suma de todos los números enteros desde 1 hasta 5 (inclusive) utilizando un bucle for. Imprime el resultado.",
    "instructions": "1. Inicializa una variable `suma_total` a 0.\n2. Usa un bucle `for` con `range()` para iterar desde 1 hasta 5.\n3. En cada iteración, añade el número actual a `suma_total`.\n4. Después del bucle, imprime el valor final de `suma_total`.",
    "starter_code": "suma_total = 0\n# Escribe tu bucle for aquí\nfor i in range(1, 6):\n    suma_total += i\nprint(suma_total)",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "15\n",
      "expected_print_count": 1,
      "expected_types": ["int"],
      "strict_variable_names": ["suma_total"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "El resultado impreso debe ser un entero.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 10,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 10,
    "order_index": 1,
    "title": "Ejercicio 3.3.1: Lista de Compras",
    "description": "Crea una lista llamada `compras`. Añade 'huevos' y luego 'pan' a la lista. Finalmente, imprime el segundo elemento de la lista (que debería ser 'pan').",
    "instructions": "1. Define una lista vacía llamada `compras`.\n2. Usa el método `append()` para añadir el string 'huevos' a la lista.\n3. Usa `append()` nuevamente para añadir 'pan'.\n4. Imprime el elemento en el índice 1 de la lista `compras`.",
    "starter_code": "compras = []\n# Añade 'huevos'\n# compras.append('huevos')\n# Añade 'pan'\n# compras.append('pan')\n# Imprime el segundo elemento\n# print(compras[1])",
    "validation_type": "simple_print",
    "validation_rules": {
      "expected_exact_output": "pan\n",
      "expected_print_count": 1,
      "expected_types": ["str"],
      "strict_variable_names": ["compras"],
      "strict_whitespace": true,
      "case_sensitive": true,
      "custom_feedback": {
        "wrong_type": "El elemento impreso debe ser un string.",
        "wrong_print_count": "Se esperaba una sola operación de print."
      }
    }
  },
  {
    "id": 11,
    "course_id": 1,
    "module_id": 3,
    "lesson_id": 11,
    "order_index": 1,
    "title": "Ejercicio 3.4.1: Función Área Rectángulo",
    "description": "Define una función `area_rectangulo` que acepte dos argumentos (base y altura) y devuelva el área. Luego, llama a la función con base=4 y altura=6, e imprime el resultado devuelto por la función.",
    "instructions": "1. Define una función llamada `area_rectangulo` que tome dos parámetros: `base` y `altura`.\n2. Dentro de la función, calcula el área (base * altura) y devuélvela usando `return`.\n3. Fuera de la función, llama a `area_rectangulo` con los valores 4 para la base y 6 para la altura.\n4. Imprime el valor que te devuelve la función.",
    "starter_code": "def area_rectangulo(base, altura):\n    # Calcula y devuelve el área\n    return base * altura\n\n# Llama a la función e imprime el resultado\n# resultado = area_rectangulo(4, 6)\n# print(resultado)",
    "validation_type": "function_and_output",
    "validation_rules": {
      "function_rules": {
        "function_name": "area_rectangulo",
        "scenarios": [
          {"args": [4, 6], "expected_return_value": 24, "expected_return_type": "int"},
          {"args": [10, 5], "expected_return_value": 50, "expected_return_type": "int"},
          {"args": [1, 1], "expected_return_value": 1, "expected_return_type": "int"}
        ],
        "require_return_statement": true
      },
      "expected_exact_output": "24\n",
      "expected_print_count": 1,
      "expected_types": ["int"]
    }
  },
  {
    "id": 12,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 1,
    "title": "Examen Final: Fundamentos de Python",
    "description": "Resuelve los siguientes ejercicios para demostrar tus conocimientos de variables, tipos, condicionales, bucles, listas y funciones en Python.",
    "instructions": "1. Implementa todas las funciones y tareas solicitadas.\n2. Cada función debe tener el nombre exacto indicado y cumplir con los tipos de entrada y salida especificados.\n3. Lee cuidadosamente cada consigna y asegúrate de que tu código pase todos los casos de prueba.\n\n**Nota sobre 'Ejecutar Código':** Para los exámenes, el botón 'Ejecutar Código' te permitirá probar tus `print()` statements y ver errores de sintaxis. La validación completa de todas las funciones del examen se realizará únicamente cuando presiones 'Enviar Solución'. Es posible que veas un mensaje indicando que el tipo de validación no es soportado para ejecución directa; esto es normal para el modo examen si intentas usar la entrada estándar, concéntrate en la salida de tus `print()` y la correcta definición de las funciones.",
    "starter_code": "def es_par(n):\n    # Tu código aquí\n    return n % 2 == 0\n\n\ndef dias_en_anios(anios):\n    # Tu código aquí\n    return anios * 365\n\n\ndef obtener_segundo(lista):\n    # Tu código aquí\n    if len(lista) >= 2:\n        return lista[1]\n    return None\n\n\ndef suma_rango(inicio, fin):\n    # Tu código aquí\n    suma = 0\n    for i in range(inicio, fin + 1):\n        suma += i\n    return suma\n\n# Si el examen requiere una salida específica de print() en el cuerpo del script,\n# agrégala aquí y define las reglas de validación correspondientes abajo.\n# Ejemplo:\n# print(es_par(4))\n# print(dias_en_anios(1))\n# print(obtener_segundo(['a', 'b']))\n# print(suma_rango(1,3))",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {
          "function_name": "es_par",
          "scenarios": [
            {"args": [2], "expected_return_value": true, "expected_return_type": "bool"},
            {"args": [3], "expected_return_value": false, "expected_return_type": "bool"},
            {"args": [0], "expected_return_value": true, "expected_return_type": "bool"}
          ]
        },
        {
          "function_name": "dias_en_anios",
          "scenarios": [
            {"args": [1], "expected_return_value": 365, "expected_return_type": "int"},
            {"args": [0], "expected_return_value": 0, "expected_return_type": "int"},
            {"args": [10], "expected_return_value": 3650, "expected_return_type": "int"}
          ]
        },
        {
          "function_name": "obtener_segundo",
          "scenarios": [
            {"args": [[1,2,3]], "expected_return_value": 2, "expected_return_type": "int"},
            {"args": [["a","b","c"]], "expected_return_value": "b", "expected_return_type": "str"},
            {"args": [["uno"]], "expected_return_value": null, "expected_return_type": "NoneType"}
          ]
        },
        {
          "function_name": "suma_rango",
          "scenarios": [
            {"args": [1, 5], "expected_return_value": 15, "expected_return_type": "int"},
            {"args": [3, 3], "expected_return_value": 3, "expected_return_type": "int"},
            {"args": [0, 2], "expected_return_value": 3, "expected_return_type": "int"}
          ]
        }
      ],
      "require_return_statement": true,
      "strict_function_names": ["es_par", "dias_en_anios", "obtener_segundo", "suma_rango"]
    }
  },
  {
    "id": 13,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 2,
    "title": "Examen Final: Lógica y Cadenas",
    "description": "Demuestra tu habilidad con la manipulación de strings y la lógica de programación.",
    "instructions": "Implementa las funciones solicitadas para pasar este examen. Cada función debe devolver el valor esperado, no imprimirlo.",
    "starter_code": "def invertir_cadena(s):\n    # Devuelve la cadena 's' invertida.\n    pass\n\ndef es_palindromo(s):\n    # Devuelve True si 's' es un palíndromo, False si no.\n    # Ignora mayúsculas/minúsculas y espacios.\n    pass\n\ndef contar_vocales(s):\n    # Devuelve el número de vocales (a, e, i, o, u) en 's'.\n    pass\n\ndef es_mayor_de_edad(edad):\n    # Devuelve True si la edad es 18 o más, False en caso contrario.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "invertir_cadena", "scenarios": [{"args": ["hola"], "expected_return_value": "aloh"}, {"args": ["Python"], "expected_return_value": "nohtyP"}, {"args": [""], "expected_return_value": ""}]},
        {"function_name": "es_palindromo", "scenarios": [{"args": ["Anita lava la tina"], "expected_return_value": true}, {"args": ["python"], "expected_return_value": false}, {"args": ["Ojo"], "expected_return_value": true}]},
        {"function_name": "contar_vocales", "scenarios": [{"args": ["murcielago"], "expected_return_value": 5}, {"args": ["xyz"], "expected_return_value": 0}, {"args": ["AEIOU"], "expected_return_value": 5}]},
        {"function_name": "es_mayor_de_edad", "scenarios": [{"args": [20], "expected_return_value": true}, {"args": [18], "expected_return_value": true}, {"args": [17], "expected_return_value": false}]}
      ]
    }
  },
  {
    "id": 14,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 3,
    "title": "Examen Final: Algoritmos y Listas",
    "description": "Implementa algoritmos fundamentales de matemáticas y listas.",
    "instructions": "Completa el código de las funciones para que pasen las pruebas. No uses funciones integradas como max() o sum() a menos que se permita.",
    "starter_code": "def factorial(n):\n    # Devuelve el factorial de n.\n    pass\n\ndef encontrar_maximo(lista):\n    # Devuelve el número más grande en la lista sin usar max().\n    pass\n\ndef filtrar_pares(lista):\n    # Devuelve una nueva lista solo con los números pares de la lista original.\n    pass\n\ndef generar_saludo(nombre, edad):\n    # Devuelve un string con el formato 'Hola [nombre], tienes [edad] años.'\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "factorial", "scenarios": [{"args": [5], "expected_return_value": 120}, {"args": [0], "expected_return_value": 1}, {"args": [1], "expected_return_value": 1}]},
        {"function_name": "encontrar_maximo", "scenarios": [{"args": [[1, 5, 2, 9, 3]], "expected_return_value": 9}, {"args": [[-1, -5, -2]], "expected_return_value": -1}, {"args": [[10]], "expected_return_value": 10}]},
        {"function_name": "filtrar_pares", "scenarios": [{"args": [[1, 2, 3, 4, 5, 6]], "expected_return_value": [2, 4, 6]}, {"args": [[1, 3, 5]], "expected_return_value": []}, {"args": [[-2, 0, 2]], "expected_return_value": [-2, 0, 2]}]},
        {"function_name": "generar_saludo", "scenarios": [{"args": ["Carlos", 30], "expected_return_value": "Hola Carlos, tienes 30 años."}, {"args": ["Maria", 22], "expected_return_value": "Hola Maria, tienes 22 años."}]}
      ]
    }
  },
  {
    "id": 15,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 4,
    "title": "Examen Final: Procesamiento de Datos",
    "description": "Escribe funciones para procesar colecciones de datos como listas.",
    "instructions": "Asegúrate de que cada función devuelva el tipo de dato correcto y maneje casos especiales como listas vacías.",
    "starter_code": "def promedio_de_lista(lista):\n    # Devuelve el promedio de los números en la lista. Si la lista está vacía, devuelve 0.\n    pass\n\ndef eliminar_duplicados(lista):\n    # Devuelve una nueva lista sin elementos duplicados, manteniendo el orden original.\n    pass\n\ndef unir_listas(lista1, lista2):\n    # Devuelve una nueva lista que es la unión de lista1 y lista2.\n    pass\n\ndef convertir_a_fahrenheit(celsius):\n    # Convierte grados Celsius a Fahrenheit usando la fórmula (C * 9/5) + 32.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "promedio_de_lista", "scenarios": [{"args": [[10, 20, 30]], "expected_return_value": 20.0}, {"args": [[5, 5, 5]], "expected_return_value": 5.0}, {"args": [[]], "expected_return_value": 0}]},
        {"function_name": "eliminar_duplicados", "scenarios": [{"args": [[1, 2, 2, 3, 1]], "expected_return_value": [1, 2, 3]}, {"args": [["a", "b", "a"]], "expected_return_value": ["a", "b"]}, {"args": [[4, 5, 6]], "expected_return_value": [4, 5, 6]}]},
        {"function_name": "unir_listas", "scenarios": [{"args": [[1, 2], [3, 4]], "expected_return_value": [1, 2, 3, 4]}, {"args": [[], [1, 2]], "expected_return_value": [1, 2]}]},
        {"function_name": "convertir_a_fahrenheit", "scenarios": [{"args": [0], "expected_return_value": 32.0}, {"args": [100], "expected_return_value": 212.0}, {"args": [-10], "expected_return_value": 14.0}]}
      ]
    }
  },
  {
    "id": 16,
    "course_id": 1,
    "module_id": null,
    "lesson_id": null,
    "order_index": 5,
    "title": "Examen Final: Lógica Condicional y Bucles",
    "description": "Resuelve problemas que requieren una lógica condicional más compleja y el uso de bucles.",
    "instructions": "Presta atención a los casos borde en cada función y asegúrate de que los bucles terminen correctamente.",
    "starter_code": "def clasificar_calificacion(nota):\n    # Devuelve 'Aprobado' (50-69), 'Notable' (70-89), o 'Sobresaliente' (90-100). 'Suspenso' para el resto.\n    pass\n\ndef es_bisiesto(anio):\n    # Devuelve True si el año es bisiesto, False si no.\n    # Un año es bisiesto si es divisible por 4, excepto los años que son divisibles por 100 pero no por 400.\n    pass\n\ndef suma_acumulada(lista):\n    # Devuelve una lista donde cada elemento es la suma de los elementos hasta esa posición.\n    # Ejemplo: [1, 2, 3] -> [1, 3, 6]\n    pass\n\ndef adivina_numero(secreto, intento):\n    # Devuelve 'Correcto', 'Muy alto' o 'Muy bajo'.\n    pass",
    "validation_type": "exam",
    "validation_rules": {
      "functions": [
        {"function_name": "clasificar_calificacion", "scenarios": [{"args": [95], "expected_return_value": "Sobresaliente"}, {"args": [80], "expected_return_value": "Notable"}, {"args": [60], "expected_return_value": "Aprobado"}, {"args": [40], "expected_return_value": "Suspenso"}]},
        {"function_name": "es_bisiesto", "scenarios": [{"args": [2024], "expected_return_value": true}, {"args": [1900], "expected_return_value": false}, {"args": [2000], "expected_return_value": true}, {"args": [2023], "expected_return_value": false}]},
        {"function_name": "suma_acumulada", "scenarios": [{"args": [[1, 2, 3, 4]], "expected_return_value": [1, 3, 6, 10]}, {"args": [[10, -5, 3]], "expected_return_value": [10, 5, 8]}, {"args": [[]], "expected_return_value": []}]},
        {"function_name": "adivina_numero", "scenarios": [{"args": [50, 50], "expected_return_value": "Correcto"}, {"args": [50, 70], "expected_return_value": "Muy alto"}, {"args": [50, 30], "expected_return_value": "Muy bajo"}]}
      ]
    }
  }
]
