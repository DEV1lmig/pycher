[
  {
    "id": 1,
    "module_id": 1,
    "title": "Lección 1.1: ¿Qué es Python y Por Qué Aprenderlo?",
    "content": "Python es un lenguaje de programación de alto nivel, interpretado, interactivo y orientado a objetos. Es conocido por su sintaxis clara y legible, que se asemeja al inglés, lo que lo hace ideal para principiantes.\n\n**Historia Breve:** Creado por Guido van Rossum y lanzado por primera vez en 1991. Su nombre se inspira en el grupo cómico británico Monty Python.\n\n**Filosofía (El Zen de Python):** Escribe `import this` en una consola de Python para ver los principios que guían el diseño del lenguaje, como 'Bonito es mejor que feo' y 'Simple es mejor que complejo'.\n\n**¿Por qué Python?**\n*   **Fácil de Aprender:** Sintaxis intuitiva.\n*   **Versátil:** Desarrollo web, ciencia de datos, inteligencia artificial, machine learning, automatización, desarrollo de juegos, y más.\n*   **Gran Comunidad:** Abundantes librerías, frameworks y recursos de ayuda.\n*   **Alta Demanda Laboral:** Uno de los lenguajes más solicitados en la industria.",
    "order_index": 1,
    "duration_minutes": 10
  },
  {
    "id": 2,
    "module_id": 1,
    "title": "Lección 1.2: Tu Primer Programa: ¡Hola, Mundo!",
    "content": "Vamos a escribir nuestro primer programa en Python. El programa más tradicional para empezar es el que muestra el mensaje \"¡Hola, mundo!\" en la pantalla.\n\n**La Función `print()`**\nEn Python, la función `print()` se utiliza para mostrar información (texto, números, etc.) en la consola.\n\n💻 **Actividad Práctica:**\nEscribe el siguiente código en tu editor o intérprete de Python:\n```python\nprint(\"¡Hola, mundo!\")\n```\n\n**Comentarios en Python**\nLos comentarios son notas que puedes añadir a tu código para explicarlo. Python los ignora al ejecutar el programa.\nSe inician con el símbolo `#`.\n```python\n# Esto es un comentario, Python no lo ejecutará\nprint(\"¡Hola, mundo!\") # Esto también es un comentario al final de una línea\n```\n✏️ **Tarea:** Modifica el programa para que también imprima tu nombre en una nueva línea.",
    "order_index": 2,
    "duration_minutes": 10
  },
  {
    "id": 3,
    "module_id": 1,
    "title": "Lección 1.3: Variables y Tipos de Datos Básicos",
    "content": "Las **variables** son como contenedores donde puedes almacenar datos para usarlos y modificarlos más tarde en tu programa. En Python, no necesitas declarar el tipo de una variable antes de usarla.\n\n**Asignación de Variables:**\n```python\nnombre_del_alumno = \"Ana\"\nedad = 25\nprecio_producto = 19.99\nes_estudiante_activo = True\n```\n\n**Nomenclatura:**\n*   Deben empezar con una letra o guion bajo (`_`).\n*   Pueden contener letras, números y guiones bajos.\n*   Son sensibles a mayúsculas y minúsculas (`edad` es diferente de `Edad`).\n*   Usa nombres descriptivos (ej. `total_compra` en lugar de `tc`).\n\n**Tipos de Datos Fundamentales:**\n*   **Integer (`int`):** Números enteros. Ej: `10`, `-3`, `0`.\n*   **Float (`float`):** Números con decimales. Ej: `3.14`, `-0.5`, `2.0`.\n*   **String (`str`):** Secuencias de caracteres (texto). Se definen con comillas simples `'...'` o dobles `\"...\"`. Ej: `\"Hola\"`, `'Python'`.\n*   **Boolean (`bool`):** Representan valores de verdad: `True` o `False`.\n\nPara saber el tipo de una variable, puedes usar la función `type()`:\n```python\nx = 10\nprint(type(x)) # Salida: <class 'int'>\n\nmensaje = \"Python es divertido\"\nprint(type(mensajes)) # Salida: <class 'str'>\n```\n✏️ **Tarea:** Crea variables para almacenar tu película favorita (string), el año de tu nacimiento (integer), y si te gusta programar (boolean). Luego imprime sus valores y tipos.",
    "order_index": 3,
    "duration_minutes": 15
  },
  {
    "id": 4,
    "module_id": 2,
    "title": "Lección 2.1: Operadores Aritméticos",
    "content": "Los operadores aritméticos se usan para realizar cálculos matemáticos.\n\n*   **Suma (`+`):** `a + b`\n*   **Resta (`-`):** `a - b`\n*   **Multiplicación (`*`):** `a * b`\n*   **División (`/`):** `a / b` (siempre devuelve un float)\n*   **División Entera (`//`):** `a // b` (devuelve la parte entera del cociente)\n*   **Módulo (`%`):** `a % b` (devuelve el resto de la división)\n*   **Exponenciación (`**`):** `a ** b` (a elevado a la potencia de b)\n\n**Ejemplos:**\n```python\nnum1 = 10\nnum2 = 3\n\nprint(f\"{num1} + {num2} = {num1 + num2}\")     # Salida: 10 + 3 = 13\nprint(f\"{num1} / {num2} = {num1 / num2}\")     # Salida: 10 / 3 = 3.333...\nprint(f\"{num1} // {num2} = {num1 // num2}\")   # Salida: 10 // 3 = 3\nprint(f\"{num1} % {num2} = {num1 % num2}\")     # Salida: 10 % 3 = 1\nprint(f\"2 ** 4 = {2 ** 4}\")             # Salida: 2 ** 4 = 16\n```\n\n**Orden de Precedencia (PEMDAS/BODMAS):** Paréntesis, Exponentes, Multiplicación/División (de izq. a der.), Suma/Resta (de izq. a der.).\n```python\nresultado = (5 + 3) * 2  # resultado es 16, no 11\nprint(resultado)\n```\n✏️ **Tarea:** Calcula el área de un rectángulo con base 5 y altura 8. Luego, calcula cuántas veces cabe un número `x` en un número `y` y cuál es el sobrante.",
    "order_index": 1,
    "duration_minutes": 15
  },
  {
    "id": 5,
    "module_id": 2,
    "title": "Lección 2.2: Operadores de Comparación y Lógicos",
    "content": "**Operadores de Comparación:** Comparan dos valores y devuelven un resultado Booleano (`True` o `False`).\n*   **Igual a (`==`):** `a == b`\n*   **Distinto de (`!=`):** `a != b`\n*   **Mayor que (`>`):** `a > b`\n*   **Menor que (`<`):** `a < b`\n*   **Mayor o igual que (`>=`):** `a >= b`\n*   **Menor o igual que (`<=`):** `a <= b`\n\n**Ejemplos:**\n```python\nprint(5 == 5)  # Salida: True\nprint(10 != 5) # Salida: True\nprint(7 > 3)   # Salida: True\n```\n\n**Operadores Lógicos:** Combinan expresiones Booleanas.\n*   **`and`:** Devuelve `True` si AMBAS expresiones son verdaderas.\n*   **`or`:** Devuelve `True` si AL MENOS UNA expresión es verdadera.\n*   **`not`:** Invierte el valor Booleano (convierte `True` a `False` y viceversa).\n\n**Ejemplos:**\n```python\nedad = 20\ntiene_licencia = True\n\nprint(edad >= 18 and tiene_licencia) # Salida: True\n\ndia_lluvioso = False\ntengo_paraguas = True\nprint(dia_lluvioso and not tengo_paraguas) # Salida: False (no llueve)\n\nes_fin_de_semana = True\ntengo_dinero = False\nprint(es_fin_de_semana or tengo_dinero) # Salida: True (es fin de semana)\n```\n✏️ **Tarea:** Escribe expresiones para verificar si un número es positivo Y par. Luego, si una persona es mayor de edad O tiene permiso de sus padres.",
    "order_index": 2,
    "duration_minutes": 15
  },
  {
    "id": 6,
    "module_id": 2,
    "title": "Lección 2.3: Entrada de Usuario y Conversión de Tipos",
    "content": "**Obtener Datos del Usuario con `input()`**\nLa función `input()` permite que tu programa solicite información al usuario. Siempre devuelve los datos como un string.\n```python\nnombre = input(\"Por favor, ingresa tu nombre: \")\nprint(f\"Hola, {nombre}!\")\n```\n\n**Conversión de Tipos (Casting)**\nComo `input()` devuelve strings, si necesitas realizar operaciones numéricas, debes convertir el string a `int` o `float`.\n*   `int(valor)`: Convierte `valor` a entero.\n*   `float(valor)`: Convierte `valor` a flotante.\n*   `str(valor)`: Convierte `valor` a string.\n\n**Ejemplo:**\n```python\nedad_str = input(\"Ingresa tu edad: \")\nedad_num = int(edad_str) # Convertimos a entero\n\nanio_nacimiento = 2024 - edad_num\nprint(f\"Naciste aproximadamente en el año {anio_nacimiento}.\")\n```\n**¡Cuidado!** Si intentas convertir un string que no representa un número válido (ej. `int(\"hola\")`), obtendrás un error.\n\n✏️ **Tarea:** Crea un programa que pida al usuario dos números, los sume y muestre el resultado. Asegúrate de convertir las entradas a números antes de sumar.",
    "order_index": 3,
    "duration_minutes": 15
  },
  {
    "id": 7,
    "module_id": 2,
    "title": "Lección 2.4: Manipulación Básica de Strings",
    "content": "Los strings son secuencias de caracteres y Python ofrece muchas formas de trabajar con ellos.\n\n**Concatenación:** Unir strings usando `+`.\n```python\nparte1 = \"Hola\"\nparte2 = \"Mundo\"\nsaludo = parte1 + \" \" + parte2 # Salida: \"Hola Mundo\"\nprint(saludo)\n```\n\n**f-strings (Strings Formateados):** Una forma moderna y legible de incrustar expresiones dentro de strings.\n```python\nnombre = \"Alice\"\nedad = 30\nprint(f\"{nombre} tiene {edad} años.\") # Salida: Alice tiene 30 años.\n```\n\n**Longitud de un String con `len()`:**\n```python\ntexto = \"Python\"\nprint(len(texto)) # Salida: 6\n```\n\n**Acceder a Caracteres (Indexación):** Los strings son indexados desde 0.\n```python\nfruta = \"Manzana\"\nprint(fruta[0]) # Salida: M (primer caracter)\nprint(fruta[3]) # Salida: z (cuarto caracter)\nprint(fruta[-1]) # Salida: a (último caracter)\n```\n\n**Rebanadas (Slicing):** Obtener una sub-cadena.\n`string[inicio:fin:paso]` (fin no se incluye)\n```python\npalabra = \"Programación\"\nprint(palabra[0:4])   # Salida: Prog\nprint(palabra[4:])    # Salida: ramación (desde el índice 4 hasta el final)\nprint(palabra[:7])    # Salida: Program (desde el inicio hasta el índice 6)\nprint(palabra[::2])   # Salida: Pormcón (cada segundo caracter)\n```\n✏️ **Tarea:** Pide al usuario su nombre completo. Luego, imprime la primera letra de su nombre y cuántos caracteres tiene su nombre completo.",
    "order_index": 4,
    "duration_minutes": 15
  },
  {
    "id": 8,
    "module_id": 3,
    "title": "Lección 3.1: Tomando Decisiones: `if`, `elif`, `else`",
    "content": "Las sentencias condicionales permiten que tu programa ejecute diferentes bloques de código según se cumplan ciertas condiciones.\n\n**Sentencia `if`:** Ejecuta un bloque de código si la condición es `True`.\n```python\nedad = 18\nif edad >= 18:\n    print(\"Eres mayor de edad.\")\n```\n\n**Sentencia `else`:** Ejecuta un bloque de código si la condición del `if` es `False`.\n```python\ntemperatura = 15\nif temperatura > 25:\n    print(\"Hace calor.\")\nelse:\n    print(\"No hace calor.\")\n```\n\n**Sentencia `elif` (else if):** Permite verificar múltiples condiciones en secuencia.\n```python\nnota = 75\nif nota >= 90:\n    print(\"Sobresaliente\")\nelif nota >= 70:\n    print(\"Notable\")\nelif nota >= 50:\n    print(\"Aprobado\")\nelse:\n    print(\"Suspenso\")\n```\n**Importante:** La indentación (espacios al inicio de la línea) es crucial en Python para definir los bloques de código.\n\n✏️ **Tarea:** Escribe un programa que pida un número al usuario e imprima si es positivo, negativo o cero.",
    "order_index": 1,
    "duration_minutes": 15
  },
  {
    "id": 9,
    "module_id": 3,
    "title": "Lección 3.2: Repitiendo Tareas: Bucles `for` y `while`",
    "content": "Los bucles permiten ejecutar un bloque de código múltiples veces.\n\n**Bucle `for`:** Itera sobre una secuencia (como un string, una lista, o un rango de números).\n\nUsando `range()` para generar secuencias de números:\n`range(fin)`: 0 hasta fin-1\n`range(inicio, fin)`: inicio hasta fin-1\n`range(inicio, fin, paso)`: inicio hasta fin-1, incrementando por paso\n\n```python\n# Imprimir números del 0 al 4\nfor i in range(5):\n    print(i)\n\n# Imprimir elementos de una palabra\nfor caracter in \"Python\":\n    print(caracter)\n```\n\n**Bucle `while`:** Ejecuta un bloque de código mientras una condición sea `True`.\n```python\ncontador = 0\nwhile contador < 5:\n    print(contador)\n    contador = contador + 1 # ¡Importante actualizar el contador para evitar bucles infinitos!\n```\n\n**`break` y `continue` (opcional):**\n*   `break`: Termina el bucle prematuramente.\n*   `continue`: Salta a la siguiente iteración del bucle.\n\n✏️ **Tarea:** Usa un bucle `for` para imprimir los números pares del 2 al 10. Luego, usa un bucle `while` para pedir al usuario que adivine un número secreto (ej. 7) hasta que lo acierte.",
    "order_index": 2,
    "duration_minutes": 20
  },
  {
    "id": 10,
    "module_id": 3,
    "title": "Lección 3.3: Introducción a las Listas",
    "content": "Una **lista** es una colección ordenada y mutable (modificable) de elementos. Pueden contener elementos de diferentes tipos.\n\n**Crear una Lista:**\n```python\nnumeros = [1, 2, 3, 4, 5]\nfrutas = [\"manzana\", \"banana\", \"cereza\"]\nmixta = [1, \"hola\", 3.14, True]\nlista_vacia = []\n```\n\n**Acceder a Elementos (Indexación):** Igual que con los strings, desde el índice 0.\n```python\nprint(frutas[0])  # Salida: manzana\nprint(frutas[1])  # Salida: banana\n```\n\n**Modificar Elementos:**\n```python\nfrutas[1] = \"arándano\"\nprint(frutas) # Salida: ['manzana', 'arándano', 'cereza']\n```\n\n**Añadir Elementos con `append()`:** Añade un elemento al final de la lista.\n```python\nfrutas.append(\"naranja\")\nprint(frutas) # Salida: ['manzana', 'arándano', 'cereza', 'naranja']\n```\n\n**Longitud de una Lista con `len()`:**\n```python\nprint(len(numeros)) # Salida: 5\n```\n\n**Iterar sobre una Lista con `for`:**\n```python\nfor fruta in frutas:\n    print(f\"Me gusta la {fruta}\")\n```\n✏️ **Tarea:** Crea una lista de tus 3 comidas favoritas. Luego, añade una cuarta comida a la lista e imprime la lista completa. Finalmente, imprime cada comida en una línea separada usando un bucle.",
    "order_index": 3,
    "duration_minutes": 20
  },
  {
    "id": 11,
    "module_id": 3,
    "title": "Lección 3.4: Introducción a las Funciones",
    "content": "Una **función** es un bloque de código reutilizable que realiza una tarea específica. Ayudan a organizar el código, hacerlo más legible y evitar la repetición.\n\n**Definir una Función:** Se usa la palabra clave `def`.\n```python\ndef saludar():\n    print(\"¡Hola desde la función!\")\n```\n\n**Llamar a una Función:**\n```python\nsaludar() # Ejecuta el código dentro de la función\n```\n\n**Parámetros:** Las funciones pueden aceptar valores de entrada, llamados parámetros.\n```python\ndef saludar_a(nombre): # 'nombre' es un parámetro\n    print(f\"¡Hola, {nombre}!\")\n\nsaludar_a(\"Ana\")       # Salida: ¡Hola, Ana!\nsaludar_a(\"Carlos\")    # Salida: ¡Hola, Carlos!\n```\n\n**Valores de Retorno con `return`:** Las funciones pueden devolver un valor al código que las llamó.\n```python\ndef sumar(a, b):\n    resultado = a + b\n    return resultado\n\nsuma_total = sumar(5, 3)\nprint(f\"La suma es: {suma_total}\") # Salida: La suma es: 8\nprint(f\"Otra suma: {sumar(10, 20)}\") # Salida: Otra suma: 30\n```\n✏️ **Tarea:** Crea una función llamada `multiplicar` que tome dos números como parámetros y devuelva su producto. Luego, llama a la función con dos números de tu elección e imprime el resultado.",
    "order_index": 4,
    "duration_minutes": 20
  },
  {
    "id": 12,
    "module_id": 5,
    "title": "Lección 1.1: Índices en Tuplas",
    "content": "Una **tupla** es una colección ordenada de elementos. Eso significa que cada elemento tiene una posición fija dentro de la tupla. Las posiciones se identifican por números llamados **índices**.\n\n### Índices Positivos\nLos índices positivos empiezan desde 0 y van hacia adelante:\n```python\ncolores = (\"rojo\", \"verde\", \"azul\", \"amarillo\")\n#            0        1         2        3\n\nprint(colores[0])  # \"rojo\", porque está en la posición 0\nprint(colores[2])  # \"azul\", está en la posición 2\n```\n\n### Índices Negativos\nPython también permite contar desde el final hacia el inicio usando índices negativos:\n```python\ncolores = (\"rojo\", \"verde\", \"azul\", \"amarillo\")\n#           -4      -3       -2       -1\n\nprint(colores[-1])  # \"amarillo\", el último elemento\nprint(colores[-2])  # \"azul\", el penúltimo\n```\nEsto es útil si no sabes exactamente cuántos elementos tiene la tupla, pero quieres acceder al final.\n\n### Ejemplo Completo\n```python\nfrutas = (\"manzana\", \"banana\", \"pera\", \"uva\")\n\nprint(\"Primera fruta:\", frutas[0])     # manzana\nprint(\"Última fruta:\", frutas[-1])     # uva\nprint(\"Fruta del medio:\", frutas[2])   # pera\n```\n\n### ¿Qué pasa si usas un índice que no existe?\nSi la tupla tiene 4 elementos y escribes:\n```python\nprint(frutas[4])\n```\nDará un error: `IndexError`, porque el índice 4 no existe (los índices válidos son del 0 al 3).\n\n✏️ **Tarea:**\nCrea una tupla llamada `dias` con los días de la semana. Luego imprime:\n- El primer día\n- El último día\n- El día que está en la posición 3",
    "order_index": 1,
    "duration_minutes": 20
  },
  {
    "id": 13,
    "module_id": 5,
    "title": "Lección 1.2: Sets, elementos únicos y operaciones",
    "content": "Un **set** (o conjunto) es una colección **no ordenada**, **sin elementos repetidos**.\nSe puede definir con llaves `{}` o usando la función `set()`.\n\n**Ejemplo: creación y comportamiento**\n```python\nnumeros = {1, 2, 3, 2, 4, 1}\nprint(numeros)  # Resultado: {1, 2, 3, 4} (los duplicados desaparecen)\n```\n\n**Agregar y eliminar elementos:**\n```python\nnumeros.add(5)       # Agrega el 5\nnumeros.remove(2)    # Elimina el 2\nprint(numeros)\n```\n\n**Operaciones comunes:**\n```python\na = {1, 2, 3}\nb = {3, 4, 5}\n\nprint(a | b)  # Unión: {1, 2, 3, 4, 5}\nprint(a & b)  # Intersección: {3}\nprint(a - b)  # Diferencia: {1, 2}\n```\n\n✏️ **Tarea:**\n- Crea dos sets con algunos números repetidos.\n- Muestra la **unión** de ambos.\n- Muestra la **intersección**.\n- Elimina un número del primer set y muestra el resultado.",
    "order_index": 2,
    "duration_minutes": 20
  },
  {
    "id": 14,
    "module_id": 5,
    "title": "Lección 1.3: Diccionarios , claves, valores, uso simple",
    "content": "Un **diccionario** en Python almacena datos en pares `clave: valor`. Las **claves** deben ser únicas, y se accede a los valores usando esas claves.\n\n**Crear y acceder a un diccionario:**\n```python\npersona = {\n    \"nombre\": \"Ana\",\n    \"edad\": 25,\n    \"ciudad\": \"Lima\"\n}\n\nprint(persona[\"nombre\"])   # Ana\nprint(persona[\"edad\"])     # 25\n```\n\n**Agregar o modificar elementos:**\n```python\npersona[\"edad\"] = 26                     # Modifica el valor existente\npersona[\"profesion\"] = \"Ingeniera\"      # Agrega una nueva clave\nprint(persona)\n```\n\n**Recorrer un diccionario con un ciclo:**\n```python\nfor clave in persona:\n    print(clave, \":\", persona[clave])\n```\n\n**Usar `.items()` para obtener claves y valores al mismo tiempo:**\n```python\nfor clave, valor in persona.items():\n    print(clave, \"=>\", valor)\n```\n\n✏️ **Ejercicio práctico:**\n1. Crea un diccionario con los datos de una mascota (`nombre`, `tipo`, `edad`).\n2. Agrega una clave nueva llamada `vacunado` con el valor `True`.\n3. Modifica la edad de la mascota.\n4. Muestra todas las claves y sus valores usando un ciclo.",
    "order_index": 3,
    "duration_minutes": 20
  },
  {
    "id": 15,
    "module_id": 6,
    "title": "Lección 2.1: Lista de Listas",
    "content": "Una **lista de listas** es una lista donde cada elemento es otra lista. Esto permite organizar datos en forma de **tabla** o **matriz**.\n\n📌 **Ejemplo: Crear y mostrar una lista de listas**\n```python\nmatriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matriz)  # Muestra toda la matriz\n\n# Acceder a un elemento específico:\nprint(matriz[0][1])  # Primer fila, segundo elemento: 2\n```\n\n📌 **Recorrer la lista de listas**\nSe pueden usar dos ciclos `for` anidados para recorrer cada fila y cada número:\n```python\nfor fila in matriz:\n    for numero in fila:\n        print(numero, end=\" \")\n    print()  # Salto de línea después de cada fila\n```\n\n✏️ **Tarea:**\nCrea una lista de listas que contenga tres filas con tres nombres cada una. Muestra cada nombre en pantalla usando ciclos `for` anidados.",
    "order_index": 4,
    "duration_minutes": 20
  },
  {
    "id": 16,
    "module_id": 6,
    "title": "Lección 2.2: Diccionario de Listas",
    "content": "Un **diccionario de listas** es un diccionario donde cada clave está asociada a una **lista de valores**.\n\n📌 **Ejemplo:**\n```python\nclases = {\n    \"matematicas\": [\"Ana\", \"Luis\", \"Carlos\"],\n    \"historia\": [\"María\", \"Jorge\", \"Ana\"],\n    \"ciencia\": [\"Luis\", \"Carlos\", \"María\"]\n}\n\nprint(clases)  # Muestra todo el diccionario\n\n# Acceder a la lista de estudiantes de matemáticas\nprint(clases[\"matematicas\"])  # ['Ana', 'Luis', 'Carlos']\n```\n\n📌 **Agregar un estudiante a una materia:**\n```python\nclases[\"historia\"].append(\"Sofía\")\nprint(clases[\"historia\"])  # ['María', 'Jorge', 'Ana', 'Sofía']\n```\n\n✏️ **Ejercicio práctico (reto):**\nCrea un diccionario llamado `equipos` con tres claves: \"futbol\", \"basquet\" y \"voley\". Cada clave debe tener una lista con tres nombres de jugadores. Muestra los nombres del equipo de **basquet**.",
    "order_index": 5,
    "duration_minutes": 20
  },
  {
    "id": 17,
    "module_id": 6,
    "title": "Lección 2.3: Recorriendo Estructuras Anidadas",
    "content": "Para acceder y mostrar datos en **estructuras anidadas** (como listas dentro de listas, o listas dentro de diccionarios) usamos **ciclos anidados**.\n\n📌 **Recorrer una lista de listas:**\n```python\nmatriz = [\n    [10, 20, 30],\n    [40, 50, 60]\n]\n\nfor fila in matriz:\n    for elemento in fila:\n        print(elemento, end=\" \")\n    print()\n```\n\n📌 **Recorrer un diccionario de listas:**\n```python\nclases = {\n    \"arte\": [\"Luis\", \"Ana\"],\n    \"musica\": [\"Sofía\", \"Jorge\"]\n}\n\nfor materia, estudiantes in clases.items():\n    print(\"Materia:\", materia)\n    for estudiante in estudiantes:\n        print(\" -\", estudiante)\n```\n\n✏️ **Ejercicio práctico (reto):**\nDado un diccionario llamado `productos`, donde cada clave es una categoría y el valor es una lista de productos, muestra en pantalla cada categoría y sus productos.",
    "order_index": 6,
    "duration_minutes": 20
  },
  {
    "id": 18,
    "module_id": 7,
    "title": "Lección 3.1: try/except",
    "content": "Cuando ejecutamos un programa, pueden ocurrir **errores** que detienen la ejecución. Para evitar que el programa se cierre abruptamente, usamos el bloque `try/except`, que nos permite **atrapar** esos errores y **manejarlos** de forma controlada.\n\n🔧 **¿Cómo funciona?**\n- El código que puede generar un error se pone dentro del bloque `try`.\n- Si ocurre un error, se ejecuta el bloque `except`.\n- Si no hay error, el bloque `except` se omite.\n\n📌 **Ejemplo:**\n```python\ntry:\n    numero = int(input(\"Ingrese un número: \"))\n    print(\"El número es:\", numero)\nexcept:\n    print(\"Error: No ingresaste un número válido.\")\n```\n\nSi el usuario ingresa texto en vez de un número, el programa no se rompe; en cambio, muestra un mensaje amigable.",
    "order_index": 7,
    "duration_minutes": 20
  },
  {
    "id": 19,
    "module_id": 7,
    "title": "Lección 3.2: Captura de Errores Comunes",
    "content": "Podemos **especificar el tipo de error** que queremos capturar usando diferentes bloques `except`.\n\n📚 **Errores comunes:**\n- `ValueError`: error al convertir tipos (ej. texto a número).\n- `ZeroDivisionError`: división entre cero.\n- `IndexError`: acceso a una posición inválida en listas o tuplas.\n- `KeyError`: cuando una clave no existe en un diccionario.\n\n📌 **Ejemplo: Capturar distintos errores**\n```python\ntry:\n    a = int(input(\"Dividendo: \"))\n    b = int(input(\"Divisor: \"))\n    resultado = a / b\n    print(\"Resultado:\", resultado)\nexcept ValueError:\n    print(\"Error: Debes ingresar un número válido.\")\nexcept ZeroDivisionError:\n    print(\"Error: No se puede dividir entre cero.\")\n```\n\nEste enfoque permite ofrecer mensajes personalizados según el tipo de error que ocurra.",
    "order_index": 8,
    "duration_minutes": 20
  },
  {
    "id": 20,
    "module_id": 7,
    "title": "Lección 3.3: finally y Validación de Entrada",
    "content": "El bloque `finally` se ejecuta **siempre**, haya o no error. Es útil para **liberar recursos** o ejecutar código que debe correr en cualquier caso.\n\n📌 **Ejemplo con `finally`:**\n```python\ntry:\n    archivo = open(\"datos.txt\", \"r\")\n    contenido = archivo.read()\n    print(contenido)\nexcept FileNotFoundError:\n    print(\"Error: El archivo no existe.\")\nfinally:\n    print(\"Proceso terminado.\")\n```\n\n✅ **Validación básica de entrada**\nPodemos usar un ciclo `while` junto con `try/except` para asegurar que el usuario ingrese datos válidos:\n```python\nwhile True:\n    try:\n        edad = int(input(\"Ingrese su edad: \"))\n        if edad < 0:\n            print(\"Edad no puede ser negativa.\")\n        else:\n            break\n    except ValueError:\n        print(\"Por favor ingrese un número válido.\")\n\nprint(\"Edad ingresada:\", edad)\n```\nEste patrón es útil para construir programas más robustos y amigables con el usuario.",
    "order_index": 9,
    "duration_minutes": 20
  },
  {
    "id": 21,
    "module_id": 7,
    "title": "Lección 3.3: Transformación de Listas con for y List Comprehensions",
    "content": "**¿Qué significa transformar una lista?**\nTransformar una lista consiste en recorrer una lista original, procesar cada uno de sus elementos y crear una nueva lista con los resultados.\n\n### 1. Transformación usando un ciclo `for`\n📌 **Ejemplo paso a paso:** Obtener una lista con los cuadrados de los números:\n```python\nnumeros = [1, 2, 3, 4, 5]   # Lista original\ncuadrados = []              # Lista vacía para almacenar resultados\n\nfor n in numeros:           # Recorrer cada número\n    cuadrado = n ** 2       # Elevar al cuadrado\n    cuadrados.append(cuadrado)  # Agregar resultado\n\nprint(cuadrados)  # Muestra: [1, 4, 9, 16, 25]\n```\n📎 ¿Qué hace cada línea?\n- `cuadrados = []`: crea una lista vacía.\n- `for n in numeros`: recorre cada número.\n- `cuadrado = n ** 2`: calcula el cuadrado.\n- `append`: agrega el resultado a la nueva lista.\n\n---\n\n### 2. Transformación usando `list comprehensions`\nUna `list comprehension` permite crear listas de forma más simple y concisa.\n```python\nnumeros = [1, 2, 3, 4, 5]\ncuadrados = [n ** 2 for n in numeros]\nprint(cuadrados)  # Salida: [1, 4, 9, 16, 25]\n```\n📎 ¿Cómo se lee?\n- `n ** 2`: operación aplicada a cada elemento.\n- `for n in numeros`: ciclo que recorre la lista.\n- Todo junto: \"para cada `n` en `numeros`, calcula `n ** 2` y guarda el resultado\".\n\n---\n\n### 3. `List comprehensions` con condición\nTambién se pueden agregar **condiciones** para filtrar elementos.\n📌 **Ejemplo: Obtener solo los números pares:**\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\npares = [n for n in numeros if n % 2 == 0]\nprint(pares)  # Salida: [2, 4, 6]\n```\nEsto genera una lista solo con los elementos que cumplan la condición `n % 2 == 0`.",
    "order_index": 10,
    "duration_minutes": 20
  },
  {
    "id": 22,
    "module_id": 7,
    "title": "Lección 3.4: Funciones lambda con sorted y filter",
    "content": "**¿Qué es una función lambda?**\n- Es una **función anónima**, sin nombre, definida en una sola línea.\n- Se utiliza para operaciones **rápidas y pequeñas**, especialmente cuando se pasan funciones como argumentos.\n\n📌 **Sintaxis básica:**\n```python\nlambda argumentos: expresión\n```\n📌 **Ejemplo:**\n```python\ndoblar = lambda x: x * 2\nprint(doblar(4))  # Salida: 8\n```\n\n---\n\n🔹 **Uso de lambda con `sorted`**\nImagina que tienes una lista de tuplas con nombres y edades, y quieres ordenarla por edad:\n```python\npersonas = [(\"Ana\", 25), (\"Luis\", 30), (\"Carlos\", 20)]\nordenadas = sorted(personas, key=lambda persona: persona[1])\nprint(ordenadas)  # [('Carlos', 20), ('Ana', 25), ('Luis', 30)]\n```\n📎 Explicación:\n- `sorted` ordena la lista.\n- `key` indica la función para obtener el valor de ordenamiento.\n- `lambda persona: persona[1]` devuelve la edad desde la tupla.\n\n---\n\n🔹 **Uso de lambda con `filter`**\nLa función `filter` devuelve solo los elementos que cumplen una **condición**.\n```python\nnumeros = [1, 2, 3, 4, 5, 6]\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)  # Salida: [2, 4, 6]\n```\n📎 Explicación:\n- `lambda x: x % 2 == 0` es la condición para números pares.\n- `filter(...)` devuelve un iterador con los elementos que cumplen la condición.\n- Usamos `list()` para convertir el resultado en una lista.",
    "order_index": 11,
    "duration_minutes": 20
  }
]
