[
    {
        "id": 44,
        "course_id": 3,
        "module_id": null,
        "lesson_id": null,
        "order_index": 1,
        "title": "Examen Final: Python Avanzado",
        "description": "Pon a prueba tu conocimiento creando clases, decoradores, generadores y manejando datos con listas y expresiones regulares.",
        "instructions": "Vamos a trabajar paso a paso con varios ejercicios prácticos para aplicar conceptos clave de Python avanzado:\n\n1. Crea una clase llamada Persona con los atributos nombre y edad. Implementa el método especial __str__ para que, al imprimir una instancia, muestre: 'Persona: [nombre], Edad: [edad]'. Crea un objeto y muéstralo.\n\n2. Añade un método cumplir_años() que incremente la edad en 1 año. Llámalo y vuelve a imprimir el objeto para ver el cambio.\n\n3. Crea un decorador llamado log que muestre el mensaje \"Ejecutando...\" antes y \"Hecho.\" después de ejecutar cualquier función. Aplica este decorador a una función saludo() que imprima \"¡Hola!\".\n\n4. Define una función generadora pares(n) que produzca los primeros n números pares. Usa un ciclo para mostrar los números generados.\n\n5. Dada esta lista de personas:\n   personas = [\n       {\"Nombre\": \"Ana\", \"Edad\": 25, \"Ciudad\": \"Lima\"},\n       {\"Nombre\": \"Luis\", \"Edad\": 30, \"Ciudad\": \"Bogotá\"},\n       {\"Nombre\": \"María\", \"Edad\": 22, \"Ciudad\": \"Quito\"}\n   ]\n   Imprime los nombres de quienes tengan 25 años o más.\n   Cuenta cuántas personas viven en \"Bogotá\".\n\n6. Usa la librería re para validar si el correo \"usuario@example.com\" es válido con re.match().",
        "starter_code": "import re\n\n# 1. Clase Persona\nclass Persona:\n    # Tu código aquí\n    pass\n\n# 2. Decorador\ndef log(func):\n    # Tu código aquí\n    pass\n\n# 3. Generador\ndef generar_pares(n):\n    # Tu código aquí\n    pass\n\n# 4. Filtrado de lista\ndef filtrar_personas_por_edad(personas, edad_minima):\n    # Tu código aquí\n    pass\n\n# 5. Validación con Regex\ndef validar_email(email):\n    # Tu código aquí\n    pass\n",
        "validation_type": "exam",
        "validation_rules": {
            "functions": [
                {
                    "function_name": "Persona",
                    "scenarios": [
                        {
                            "setup_code": "p = Persona('Ana', 25); p.cumplir_anos()",
                            "validation_code": "str(p)",
                            "expected_return_value": "Persona: Ana, Edad: 26"
                        }
                    ]
                },
                {
                    "function_name": "generar_pares",
                    "scenarios": [
                        {
                            "args": [
                                3
                            ],
                            "expected_return_value": [
                                2,
                                4,
                                6
                            ]
                        },
                        {
                            "args": [
                                0
                            ],
                            "expected_return_value": []
                        }
                    ]
                },
                {
                    "function_name": "filtrar_personas_por_edad",
                    "scenarios": [
                        {
                            "args": [
                                [
                                    {
                                        "Nombre": "Ana",
                                        "Edad": 25
                                    },
                                    {
                                        "Nombre": "Luis",
                                        "Edad": 30
                                    },
                                    {
                                        "Nombre": "María",
                                        "Edad": 22
                                    }
                                ],
                                25
                            ],
                            "expected_return_value": [
                                "Ana",
                                "Luis"
                            ]
                        }
                    ]
                },
                {
                    "function_name": "validar_email",
                    "scenarios": [
                        {
                            "args": [
                                "usuario@example.com"
                            ],
                            "expected_return_value": true
                        },
                        {
                            "args": [
                                "usuario.com"
                            ],
                            "expected_return_value": false
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 45,
        "course_id": 3,
        "module_id": null,
        "lesson_id": null,
        "order_index": 2,
        "title": "Examen Final: Python Avanzado",
        "description": "Evalúa tu habilidad para crear clases con métodos útiles, usar decoradores, generadores y manipular listas con expresiones regulares aplicadas a situaciones reales.",
        "instructions": "Sigue las instrucciones para crear funciones y clases que reflejen ejemplos cotidianos:\n\n1. Define una clase Producto con atributos nombre y precio. Implementa el método __str__ para mostrar: 'Producto: [nombre], Precio: $[precio]'.\n\n2. Añade un método aplicar_descuento(porcentaje) para modificar el precio según un descuento dado. Prueba este método.\n\n3. Crea un decorador anuncio que imprima \"Inicio de función\" antes y \"Fin de función\" después de ejecutar cualquier función. Aplícalo a una función procesar() que imprima \"Procesando datos...\".\n\n4. Define una función generadora cuadrados(n) que genere los cuadrados de los primeros n números naturales.\n\n5. Dada la lista:\n   usuarios = [\n       {\"Nombre\": \"Carlos\", \"Edad\": 28, \"Ciudad\": \"Lima\"},\n       {\"Nombre\": \"Laura\", \"Edad\": 19, \"Ciudad\": \"Bogotá\"},\n       {\"Nombre\": \"Pedro\", \"Edad\": 35, \"Ciudad\": \"Lima\"}\n   ]\n   Muestra los nombres de los usuarios que viven en \"Lima\".\n   Cuenta cuántos usuarios tienen más de 25 años.\n\n6. Utiliza re.sub para reemplazar todos los espacios en el texto \"Hola mundo Python\" por guiones bajos.",
        "starter_code": "import re\n\n# 1. Clase Producto\nclass Producto:\n    # Tu código aquí\n    pass\n\n# 2. Generador\ndef generar_cuadrados(n):\n    # Tu código aquí\n    pass\n\n# 3. Filtrado de lista\ndef filtrar_usuarios_por_ciudad(usuarios, ciudad):\n    # Tu código aquí\n    pass\n\n# 4. Reemplazo con Regex\ndef reemplazar_espacios(texto):\n    # Tu código aquí\n    pass\n",
        "validation_type": "exam",
        "validation_rules": {
            "functions": [
                {
                    "function_name": "Producto",
                    "scenarios": [
                        {
                            "setup_code": "p = Producto('Laptop', 1000); p.aplicar_descuento(10)",
                            "validation_code": "p.precio",
                            "expected_return_value": 900
                        }
                    ]
                },
                {
                    "function_name": "generar_cuadrados",
                    "scenarios": [
                        {
                            "args": [
                                4
                            ],
                            "expected_return_value": [
                                1,
                                4,
                                9,
                                16
                            ]
                        }
                    ]
                },
                {
                    "function_name": "filtrar_usuarios_por_ciudad",
                    "scenarios": [
                        {
                            "args": [
                                [
                                    {
                                        "Nombre": "Carlos",
                                        "Ciudad": "Lima"
                                    },
                                    {
                                        "Nombre": "Laura",
                                        "Ciudad": "Bogotá"
                                    },
                                    {
                                        "Nombre": "Pedro",
                                        "Ciudad": "Lima"
                                    }
                                ],
                                "Lima"
                            ],
                            "expected_return_value": [
                                "Carlos",
                                "Pedro"
                            ]
                        }
                    ]
                },
                {
                    "function_name": "reemplazar_espacios",
                    "scenarios": [
                        {
                            "args": [
                                "Hola mundo Python"
                            ],
                            "expected_return_value": "Hola_mundo_Python"
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 46,
        "course_id": 3,
        "module_id": null,
        "lesson_id": null,
        "order_index": 3,
        "title": "Examen Final: Python Avanzado",
        "description": "Pon en práctica tus conocimientos en clases, métodos, decoradores, generadores, y operaciones con listas y expresiones regulares aplicados a ejemplos reales.",
        "instructions": "Completa cada ejercicio basándote en ejemplos del día a día:\n\n1. Crea la clase Cuenta con atributos titular y saldo. Define el método __str__ para mostrar: 'Cuenta de [titular], Saldo: $[saldo]'.\n\n2. Agrega un método depositar(cantidad) que sume la cantidad al saldo actual.\n\n3. Crea un decorador rastro que imprima \"Llamando función...\" antes de ejecutar cualquier función. Úsalo en una función inicio().\n\n4. Define una función generadora multiplos_de_tres(n) que genere los primeros n múltiplos de 3.\n\n5. Dada la lista:\n   conductores = [\n       {\"Nombre\": \"Elena\", \"Edad\": 32, \"Ciudad\": \"Quito\"},\n       {\"Nombre\": \"Jorge\", \"Edad\": 21, \"Ciudad\": \"Bogotá\"},\n       {\"Nombre\": \"Sara\", \"Edad\": 30, \"Ciudad\": \"Quito\"}\n   ]\n   Muestra los nombres de conductores que tienen 30 años o más.\n   Cuenta cuántos viven en \"Lima\".\n\n6. Utiliza re.search para verificar si el texto \"La matrícula es ABC123\" contiene un patrón alfanumérico seguido de números.",
        "starter_code": "import re\n\n# 1. Clase Cuenta\nclass Cuenta:\n    # Tu código aquí\n    pass\n\n# 2. Generador\ndef generar_multiplos_de_tres(n):\n    # Tu código aquí\n    pass\n\n# 3. Filtrado de lista\ndef contar_conductores_por_ciudad(conductores, ciudad):\n    # Tu código aquí\n    pass\n\n# 4. Búsqueda con Regex\ndef verificar_matricula(texto):\n    # Tu código aquí\n    pass\n",
        "validation_type": "exam",
        "validation_rules": {
            "functions": [
                {
                    "function_name": "Cuenta",
                    "scenarios": [
                        {
                            "setup_code": "c = Cuenta('Juan', 100); c.depositar(50)",
                            "validation_code": "c.saldo",
                            "expected_return_value": 150
                        }
                    ]
                },
                {
                    "function_name": "generar_multiplos_de_tres",
                    "scenarios": [
                        {
                            "args": [
                                4
                            ],
                            "expected_return_value": [
                                3,
                                6,
                                9,
                                12
                            ]
                        }
                    ]
                },
                {
                    "function_name": "contar_conductores_por_ciudad",
                    "scenarios": [
                        {
                            "args": [
                                [
                                    {
                                        "Nombre": "Elena",
                                        "Ciudad": "Quito"
                                    },
                                    {
                                        "Nombre": "Jorge",
                                        "Ciudad": "Bogotá"
                                    },
                                    {
                                        "Nombre": "Sara",
                                        "Ciudad": "Quito"
                                    }
                                ],
                                "Lima"
                            ],
                            "expected_return_value": 0
                        }
                    ]
                },
                {
                    "function_name": "verificar_matricula",
                    "scenarios": [
                        {
                            "args": [
                                "La matrícula es ABC123"
                            ],
                            "expected_return_value": true
                        },
                        {
                            "args": [
                                "No hay matrícula"
                            ],
                            "expected_return_value": false
                        }
                    ]
                }
            ]
        }
    },
    {
        "id": 47,
        "course_id": 3,
        "module_id": null,
        "lesson_id": null,
        "order_index": 4,
        "title": "Examen Final: Python Avanzado",
        "description": "Aplicación práctica de Python avanzado: clases, métodos, decoradores, generadores, y manejo de listas y expresiones regulares en situaciones reales.",
        "instructions": "Resuelve los siguientes ejercicios paso a paso:\n\n1. Define la clase Vehículo con atributos marca y modelo. Implementa __str__ para mostrar: 'Vehículo: [marca] [modelo]'.\n\n2. Agrega un método cambiar_modelo(nuevo_modelo) para actualizar el modelo.\n\n3. Crea un decorador temporizador que imprima \"Inicio\" antes y \"Fin\" después de la ejecución de cualquier función. Aplica este decorador a una función arrancar() que imprima \"Arrancando motor...\".\n\n4. Define una función generadora fibonacci(n) que genere los primeros n números de Fibonacci.\n\n5. Dada la lista:\n   conductores = [\n       {\"Nombre\": \"Elena\", \"Edad\": 32, \"Ciudad\": \"Quito\"},\n       {\"Nombre\": \"Jorge\", \"Edad\": 21, \"Ciudad\": \"Bogotá\"},\n       {\"Nombre\": \"Sara\", \"Edad\": 30, \"Ciudad\": \"Quito\"}\n   ]\n   Muestra los nombres de conductores que tienen 30 años o más.\n   Cuenta cuántos viven en \"Lima\".\n\n6. Utiliza re.search para verificar si el texto \"La matrícula es ABC123\" contiene un patrón alfanumérico seguido de números.",
        "starter_code": "import re\n\n# 1. Clase Vehiculo\nclass Vehiculo:\n    # Tu código aquí\n    pass\n\n# 2. Generador\ndef generar_fibonacci(n):\n    # Tu código aquí\n    pass\n\n# 3. Filtrado de lista\ndef filtrar_conductores_por_edad(conductores, edad):\n    # Tu código aquí\n    pass\n\n# 4. Búsqueda con Regex\ndef verificar_patron_matricula(texto):\n    # Tu código aquí\n    pass\n",
        "validation_type": "exam",
        "validation_rules": {
            "functions": [
                {
                    "function_name": "Vehiculo",
                    "scenarios": [
                        {
                            "setup_code": "v = Vehiculo('Toyota', 'Corolla'); v.cambiar_modelo('Yaris')",
                            "validation_code": "v.modelo",
                            "expected_return_value": "Yaris"
                        }
                    ]
                },
                {
                    "function_name": "generar_fibonacci",
                    "scenarios": [
                        {
                            "args": [
                                5
                            ],
                            "expected_return_value": [
                                0,
                                1,
                                1,
                                2,
                                3
                            ]
                        }
                    ]
                },
                {
                    "function_name": "filtrar_conductores_por_edad",
                    "scenarios": [
                        {
                            "args": [
                                [
                                    {
                                        "Nombre": "Elena",
                                        "Edad": 32
                                    },
                                    {
                                        "Nombre": "Jorge",
                                        "Edad": 21
                                    },
                                    {
                                        "Nombre": "Sara",
                                        "Edad": 30
                                    }
                                ],
                                30
                            ],
                            "expected_return_value": [
                                "Elena",
                                "Sara"
                            ]
                        }
                    ]
                },
                {
                    "function_name": "verificar_patron_matricula",
                    "scenarios": [
                        {
                            "args": [
                                "La matrícula es ABC123"
                            ],
                            "expected_return_value": true
                        }
                    ]
                }
            ]
        }
    }
]
